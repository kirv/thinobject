#!/bin/sh

ob=$1; shift
dict=$1; shift
test -e $dict || exit 1

csv=0
test -n "$1" && ( test "$1" == "--csv" || test "$1" == "--tab" ) && {
    if [ "$1" == "--csv" ]; then
        csv=","
    elif [ "$1" == "--tab" ]; then
        csv="\t"
    fi
    shift
    }

exec /usr/bin/awk -vcsv=$csv '
    BEGIN { ## process optional keys list:
        if ( ARGC > 1 ) {
            okeys[1] = ARGV[1]
            keyslist = ARGV[1]
            for ( i=2; i<ARGC; i++ ) {
                okeys[i] = ARGV[i]
                keyslist = keyslist "|" ARGV[i]
                }
            delete ARGV
            }
        }
    !/^ *#/ && !/^[ \t]*$/ { ## process each non-comment, not blank line...
    sub(/ *= */, "=") # reduce delimeter to a single character
    p = match($0, /=/) # p is position of tag=val delimeter
    thiskey = substr($0, 1, p-1)

    if ( keyslist == "" )
        okeys[++okeys_i] = thiskey
    else ## add key to okeys array
        if ( thiskey !~ keyslist )
            next
    e += 1
    key[e] = thiskey
    val[e] = substr($0, p+1)
    }
    END {

    for ( i=1; 1; i++ ) { ## loop through okeys array
        if ( ! ( i in okeys ) ) ## done!
            break
        thiskey = okeys[i]
        for (j in key) { ## loop through key array
            if ( key[j] == thiskey ) {
                if ( csv ) {
                    keys = keys csv thiskey
                    if ( match(val[j], csv) ) # quote val if delimiter is in it
                        vals = vals csv "\"" val[j] "\""
                    else
                        vals = vals csv val[j]
                    }
                else
                    print thiskey " = " val[j]
                }
            }
        }
    if ( ! csv ) exit 0
    sub(csv, "", keys)
    print keys
    sub(csv, "", vals)
    print vals
    }' < $dict $@

