#!/usr/bin/perl -w
use strict;
use warnings;

use Getopt::Long;

my $object = shift;

my $pad = 8;

## process commandline options:
use Getopt::Long;
GetOptions (
    'h'             => sub { print "see --help\n"; exit 1 },
    'help'          => sub { exec "pod2text $0" },
    'pad=i'  => \$pad,
    ) or die "$!\n";

## initialze code/decode structures:
my @code = ( 0..9, 'a'..'h', 'j', 'k', 'm', 'n', 'p'..'t', 'v'..'z'); 
my %decode;
my $i = 0;
$decode{$_} = $i++ foreach @code;

my $input = shift;

if ( $pad > 0 ) {
    printf "%0${pad}s\n", decode($input);
    }
else {
    print decode($input), "\n";
    }

exec "$0 dummy --pad $pad @ARGV" if @ARGV;

exit;

sub decode { # return unencoded value
    my $b32 = shift;
    my $n = 0;
    $n = $n * 32 + $decode{$_} foreach split '', $b32;
    return $n;
    }


=head1 NAME

TimeSeries.decode32 -- decode numbers from base-32 character string

=head1 SYNOPSIS

  timeseries.encode32 [--pad N] NUMBER ...

=head1 DESCRIPTION

Decode base-32 string to base-10 number, zero-padded to eight places
by default.

=head1 OPTIONS

=over

=item --help

=item --pad

0-pad result to PAD characters, default is --pad 5

=head1 BUGS


=head1 AUTHOR

Ken Irving <fnkci@uaf.edu> (c) 2008

Licensed under the GPL (Gnu Public Library)

