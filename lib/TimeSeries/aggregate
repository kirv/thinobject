#!/bin/bash

self=.

unset INITIALIZE

while [ "${1:0:1}" == "-" ]; do # handle option ...
    opt=$1 && shift
    case $opt in
    -h)
        tob ..usage $0
        exit 0
        ;;
    --help)
        exec tob ..manual
        ;;
    --verbose|-v)
        VERBOSE=1
        ;;
    --init)
        INITIALIZE=1
        ;;
    *)
        echo unknown option: \"$opt\"
        show_usage
        exit 2
        ;;
    esac
done

test -d aggregate || {
    tob aggregate.new Aggregate
    INITIALIZE=1
    test "$VERBOSE" && echo aggregate container created
    
    }

test "$INITIALIZE" && test -z "$1" && test $(ls aggregate|wc -l) == 1 &&
    tob_error -x 1 "missing required object argument(s)"



## add any argument objects to be aggregated:
for target in $@; do

    test -e $target ||
        tob_error -x 1 target object $target not found

    ## ASSERT: target object exists

    ## get earliest data time from the object and encode32 it:
    start_time=$(tob $target.timeline --epoch --no-header --fsep=,)
    start_time=$(tob $self.encode32 --pad 7 ${start_time%%,*})

    test "$VERBOSE" && 
        echo adding $target as $start_time
    test -e aggregate/$start_time &&
        tob_error -x 1 duplicate name $start_time for $target
    ## set a link to the object:
    ln -s $(tob $target.tob) aggregate/$start_time

done

test "$VERBOSE" && echo objects are defined in aggregate container

# for tag in ${AGGREGATE_attributes[@]} ; do
#     echo tag: $tag
# done
# for prop in $AGGREGATE_properties ; do
#     echo property: $prop
# done

## ASSERT: objects to be aggregated are in place

test "$INITIALIZE" && {

    declare -a AGGREGATE_attributes=( interval tzofs ${AGGREGATE_attributes[@]} )
    declare -a AGGREGATE_properties=( ${AGGREGATE_properties[@]} )

    ##
    ## the following assumes attributes are defined as tag=val filenames
    ## 
    ## better if it also got attributes from %, the default dictionary
    ##

    ## identify earliest object by sorting name:
    targ=$(ls aggregate|sort|head -n 1)

    ## copy attributes:
    for attr in ${AGGREGATE_attributes[@]} ; do
        for keyval in $(ls aggregate/$targ/$attr=*); do
            cp $keyval .
        done
    done

    ## copy properties:
    for prop in ${AGGREGATE_properties[@]} ; do
        cp aggregate/$targ/$prop .
    done

    ## check that attributes & properties match in each object
    for targ in $(ls aggregate|sort); do
        test $targ == ^ && continue

        ## check attributes:
        for key in ${AGGREGATE_attributes[@]} ; do
            keyval=$(ls $attr=*)
          # echo testing: -e aggregate/$targ/$keyval
            test -e aggregate/$targ/$keyval || {
                for ok in ${AGGREGATE_no_check[@]}; do
                    ## the property differs, but maybe that's ok?
                    test $attr == $ok && continue 2
                done
                tob_error -x 1 $attr differs from $targ
                }
        done
    
        ## check properties:
        for prop in ${AGGREGATE_properties[@]} ; do
          # echo diff $prop aggregate/$targ/$prop
            diff -q $prop aggregate/$targ/$prop || {
                for ok in ${AGGREGATE_no_check[@]}; do
                    test $prop == $ok && continue 2
                done
                tob_error -x 1 $prop differs from $targ
                }
        done

    ## ASSERT: attributes & properties match in each object
    done
    }

test "$VERBOSE" && echo attributes and properties check out

## ASSERT: aggregate object is ready for sync

## sync datasets from linked objects to this object:

for target in $(ls aggregate); do
    test $target == "^" && continue
    tpath=$(tob aggregate:$target.tob)
    tob $tpath.get-stream | tob $self.store-stream --tzofs=0000 
done

 
exit 0

NAME
    TimeSeries.aggregate -- aggregate data from several timeseries objects

SYNOPSIS
    timeseries.aggregate path/to/object ... 
    timeseries.aggregate

DESCRIPTION
    The first time called, an object should be passed, and the method
    will set things up.

    Every time called, the linked objects are queried again for timeseries
    data, which are then stored in the aggregate object.

    Additional objects can be passed on any call.

VARIABLES
    The array variables: 

        AGGREGATE_attributes
        AGGREGATE_properties
        AGGREGATE_no_check

    are scanned, and any attributes and properties listed will be copied
    from the first object scanned and checked in the others.

    A subclass can specify object elements to the be copied and checked in
    these variables.

TO DO
    An option might be made to not be persistent... 

AUTHOR
    ki (c) 2008

