#!/usr/bin/perl -w
use strict;
use warnings;

use Getopt::Long;
use Time::Local qw(timegm);

use Date::Format; # needed time2str output timestamp formatting

# print qq(command line: $0 @ARGV\n);

my $tag;
my $t_first;
my $t_last;
my $interval;
my $quantity;
# my $t_skip;
my $output_timestamp = '%Y-%m-%d %H:%M:%S%z%t'; # default to ISO 8601 format
my $otz;
my $header;
my $get_help;
my $debug;

## process commandline options:
use Getopt::Long;
GetOptions (
    'hdr|header=s'  => \$header,
    'tag=s'  => \$tag,
    'from=s' => sub { $t_first = convert_time_option($_[1]); },
    'to=s' => sub { $t_last = convert_time_option($_[1]); },
    'qty|for=s' =>
        sub { ($quantity, $interval) = convert_count_or_interval($_[1]); },
  # 'skip=s' =>  sub { $t_skip = convert_count_or_interval($_[1]); },
    'last=s' => 
        sub { # --last ... implies --to now:
            $t_last = convert_time_option('now');
            ($quantity, $interval) = convert_count_or_interval($_[1]);
            ## could get confusing if --to is also given ...
            },
    'ots|output-timestamp:s'  => \$output_timestamp,
    'otz|output-timezone=s'  => \$otz,
    'h'             => sub { print "see --help\n"; exit 1 },
    'help:s'        => \$get_help,
    'd|debug'        => \$debug,
    ) or die "$!\n";

## resolve interval, if specified, to first or last time spec
if ( $interval ) {
    die "from, to, and interval all specified\n" if $t_first && $t_last;
    print " SEC $interval\n" if $debug;
    if ( $t_first ) {
        $t_last = $t_first + $interval;
        }
    elsif ( $t_last ) {
        $t_first = $t_last - $interval;
        }
    else {  # neither first nor last??
        die "count or interval needs from or to time\n";
        }
    undef $interval; # just to say we're done with it
    }
elsif ( $quantity ) {
  # print " QTY $quantity\n" if $debug;
  # die "output count prior to a time not yet supported\n" if $t_last;
    }

if ( $debug ) {
    print "FROM $t_first\n" if $t_first;
    print "  TO $t_last\n" if $t_last;
    print " OTS $output_timestamp\n" if $output_timestamp;
    print " QTY $quantity\n" if $quantity;
    print " SEC $interval\n" if $interval;
    }

print_help( $get_help ) if defined $get_help;

$tag = defined $tag ? "$tag-" : '';

## initialze code/decode structures for base32 times:
my @code = ( 0..9, 'a'..'h', 'j', 'k', 'm', 'n', 'p'..'t', 'v'..'z'); 
my %decode;
my $i = 0;
$decode{$_} = $i++ foreach @code;

my $chunkdir = '_'; # default internal directory for multiline "chunks"

## parse the "get" query 

opendir SELF, '.' or die "failed to open directory\n";

my @dataset;
my %details;
my $suffix;
while ( my $dataset = readdir SELF ) {
  # print "SCANNING: $dataset\n";
    next unless
        my ($year, $from, $last, $suffix) = $dataset =~
        m/^\@$tag(\d{4})-([0-9a-z]{5})-([0-9a-z]{5})-(\S+)$/;
    push @dataset, $dataset;
    $MAIN::suffix = $suffix unless defined $MAIN::suffix;
  # print "CHECKING: $dataset\n";
    
    ## may need to relax this criterion perhaps?:
    die "suffix: $suffix differs from previous: $MAIN::suffix\n"
        unless $suffix eq $MAIN::suffix;

    my ($interval, $offset, $count) = decode_suffix($suffix);
    
    $details{$dataset} = [
        epoch_year($year),
        decode_ysec($from),
        decode_ysec($last),
        $interval,
        $offset,
        $count,
        ];
    }

## ASSERT: timeseries dataset filenames have been parsed; ready for output...

if ( $header ) {
    if ( $output_timestamp ) {
        $header = describe_ots() . $header;
        }
    print $header, "\n";
    }

if ( $t_last && $quantity ) {
    my @reverse_output;
    foreach my $dataset ( reverse sort @dataset ) { 
        last unless $quantity;
        my ($year_epoch, $from, $last, $interval, $offset, $count) =
            @{$details{$dataset}};
        open DSET, '<', $dataset or die "failed to open $dataset, $!\n";
        my $t = $year_epoch + $last;
        foreach ( reverse <DSET> ) {

            # need to handle each timeseries type case:
            if ( defined $count ) { #  non-interval dataset, timestamp on line
                s/^(\d+) //;
                $t = $year_epoch + $1;
                push @reverse_output, format_timestamp($t) . $_;
                }
            elsif ( defined $offset ) { # only datum is on line
                die unless $interval;
                push @reverse_output, format_timestamp($t + $offset) . $_;
                }
            else { # timestamp offset is first on line
                die unless $interval;
                s/^(\d+) //;
                my $ofs = $1 || 0;
                push @reverse_output, format_timestamp($t + $ofs) . $_;
                }

            $t -= $interval if $interval;

            $quantity -= 1;
            last unless $quantity;
            }
        }
    foreach ( reverse @reverse_output ) {
        print $_;
        }
    exit 0;

    }



######################
## arriving at the main output processing loop with the following variables:
##     $t_first  -- epoch time of first record
##     $t_last   -- epoch time of last record
##     $quantity -- number of records to output ($t_first must be set)
######################

my $n = 0; # count number of records output
foreach my $dataset ( sort @dataset ) { # note: lexical order == temporal order
    my ($year_epoch, $from, $last, $interval, $offset, $count) =
        @{$details{$dataset}};
    ## see if we can skip this dataset:
    next if defined $t_first && $year_epoch + $last < $t_first; ## too early
    last if defined $t_last && ($year_epoch + $from > $t_last);   ## too late
 #  warn "get data from $dataset\n";

    open DSET, '<', $dataset or die "failed to open $dataset, $!\n";

    my $t = $year_epoch + $from; # epoch time of first record
    if ( defined $count ) { ## non-interval dataset, timestamp precedes record
        while ( <DSET> ) {
            printf "case1: ";
            my ($ysec, $datum) = m/^\d+ (.+)/; 
            print format_timestamp($year_epoch + $ysec) if $output_timestamp;
            print $_;
            $n += 1;
            if ( $quantity && ($n >= $quantity) ) { 
                $t_last = $year_epoch + $ysec; # <-- kludge to stop output
                last;
                }
            }
        close DSET or die $!;
        }
    elsif ( $t_first || $t_last ) { # limited interval dataset
        while ( defined $t_first && $t < $t_first && <DSET> ) { # too early...
            $t += $interval;
            }
        ## ASSERT: next datum is ok if it exists, unless it's already too late
        while ( <DSET> ) {
            printf "case2: ";
            last if defined $t_last && $t > $t_last;
            if ( defined $offset ) {
                print format_timestamp($t + $offset) if $output_timestamp;
                }
            else { # parse timestamp offset from datum
                s/^(\d+) //;
                my $ofs = $1 || 0;
                print format_timestamp($t + $ofs) if $output_timestamp;
                }
            print $_;
            $t += $interval;
            $n += 1;
            if ( $quantity && ($n >= $quantity) ) { 
                $t_last = $t; # <-- trick/kludge to stop output
                last;
                }
            }
        close DSET or die $!;
        }
    else { # output all of interval dataset
        while ( <DSET> ) {
            printf "case3: ";
            if ( defined $offset ) {
                print format_timestamp($t + $offset) if $output_timestamp;
                }
            else { # parse timestamp offset from datum
                s/^(\d+) //;
                my $ofs = $1 || 0;
                print format_timestamp($t + $ofs) if $output_timestamp;
                }
            print $_;
            $t += $interval;
            }
        close DSET or die $!;
        }
    }

## subroutines follow:
sub epoch_year { # seconds from unix epoch for beginning of year
    ## could cache the result, but probably not worth the bother/overhead
    return timegm(0,0,0,1,0,$_[0]);
    }

sub encode_ysec { # encode number into base-32 character string
    my $n = shift;
    my $b32 = '';
    while ( $n > 0 ) {
        $b32 = $code[ $n % 32 ] . $b32;
        $n = int( $n / 32 );
        }
    return $b32;
    }

sub decode_ysec { # return unencoded value
    my $b32 = shift;
    my $n = 0;
    $n = $n * 32 + $decode{$_} foreach split '', $b32;
    return $n;
    }

sub decode_n_units { # 1h, 0s, etc....
    my ($multiplier, $unit) = $_[0] =~ m/^(\d+)(\S)$/
        or return undef;

    my %units = ( # factor to convert to seconds
            s => 1,
            m => 60,   # seconds in a minute
            h => 3600,  # ... hour
            d => 86400,  # ... day
            w => 604800,  # ... week
            t => 2592000,  # ... month... really 30 days
            y => 31536000,  # ... year... really 365 days
            );

    die "unknown interval/offset unit: $unit from $_[0]\n"
        unless exists $units{$unit};

    ## ASSERT: units is one of the supported ones
    
    return $units{$unit} * $multiplier;
    }

# sub decode_suffix {
#     ## the following will be undefined if suffix is a non-interval count:
#     my ($interval, $offset) = $_[0] =~ m/^(\d+\S)-(\d+\S)$/;
#     $interval = decode_n_units($interval) if $interval;
#     $offset = decode_n_units($offset) if $offset;
#     $interval = -1 unless defined $interval;
#     $offset = -1 unless defined $offset;
#     return ($interval, $offset);
#     }

sub decode_suffix {
    my $count = shift;
    # cases: 145, 3600s, 1800s-5s
    return (undef, undef, $count) if $count =~ m/^\d+$/;
    my ($interval, $offset) = split /-/, $count;
    $interval = decode_n_units($interval) if $interval;
    $offset = decode_n_units($offset) if $offset;
    return ($interval, $offset, undef);
    }

sub convert_time_option {
    chomp(my $epoch_sec = `/bin/date -d '$_[0]' +%s`);
    if ( $? ) {
        print "invalid date: $_[0]\n";
        die "\n";
        }
  # print "$_[0] = $epoch_sec\n";
    return $epoch_sec;
    }

sub convert_count_or_interval {
    my ($qty, $unit) = $_[0] =~ m/^([\d.]+)\s*([\S]+)?$/;
    $unit = 'count' unless defined $unit;
    die "option not supported: $_[0]\n" unless defined $qty;
    my $count;
    my $interval;
    if ( $unit =~ m/^(record|count|array|row|line)s?$/ ) {
        die "non-integer counting value $qty\n" unless $qty =~ m/^\d+$/;
        $count = $qty;
        }
    elsif ( $unit =~ m/^ # spelled out or abbreviated time units:
          ( second | minute | hour | day | week | month | year | 
            sec    | min    | hr   |         wk | mth   | yr )s? |
          [smhdwty] $/x ) {
        my ($code) = $unit =~ m/^(.)/i; # grab just first letter!
        $code = 't' if $unit =~ m/^month|mth/i; # resolve ambiguity
        $interval = int $qty * decode_n_units( '1' . $code );
        }
    else {
        die "unsupported option arg: $_[0]\n";
        }
    return ( $count, $interval );
    }

sub format_timestamp { 
    return '' unless $output_timestamp;
    return time2str( $output_timestamp, $_[0] ) unless $otz;
    return time2str( $output_timestamp, $_[0], $otz );
    }

sub describe_ots { ## try to s/format string/readable description/g
    my $descr = $output_timestamp;
    return "" unless $descr;
    my %mapping = (
        '%%' => '%',
        '%a' => 'wkd',               # day of the week abbr
        '%A' => 'wk_day',            # day of the week
        '%b' => 'mth',               # month abbr
        '%B' => 'month',             # month
        '%c' => 'mm/dd/yy hh:mm:ss', # MM/DD/YY HH:MM:SS
        '%C' => 'wkd mth dd hh:mm:ss tzofs year', # ctime format
        '%d' => 'dd',                # numeric day of the month, with leading zeros (eg 01..31)
        '%e' => 'dd',                # numeric day of the month, without leading zeros (eg 1..31)
        '%D' => 'mm/dd/yy',          # MM/DD/YY
        '%G' => 'gpswk',             # GPS week number (weeks since January 6, 1980)
        '%h' => 'mth',               # month abbr
        '%H' => 'hh',              # hour, 24 hour clock, leading 0's)
        '%I' => 'hh',                # hour, 12 hour clock, leading 0's)
        '%j' => 'day',               # day of the year
        '%k' => 'hh',                # hour
        '%l' => 'hh',                # hour, 12 hour clock
        '%L' => 'MM',                # month number, starting with 1
        '%m' => 'MM',                # month number, starting with 01
        '%M' => 'mm',                # minute, leading 0's
        '%n' => "\n",                # NEWLINE
        '%o' => 'dom',               # ornate day of month -- "1st", "2nd", "25th", etc.
        '%p' => 'ap',                # AM or PM
        '%P' => 'ap',                # am or pm (Yes %p and %P are backwards :)
        '%q' => 'qtr',               # Quarter number, starting with 1
        '%r' => 'hh:mm:ss ap',       # time format: 09:05:57 PM
        '%R' => 'hh:mm',             # time format: 21:05
        '%s' => 'epoch_time',        # seconds since the Epoch, UCT
        '%S' => 'ss',                # seconds, leading 0's
        '%t' => "\t",                # TAB
        '%T' => 'hh:mm:ss',          # time format: 21:05:57
        '%U' => 'wk',                # week number, Sunday as first day of week
        '%w' => 'wd',                # day of the week, numerically, Sunday == 0
        '%W' => 'wk',                # week number, Monday as first day of week
        '%x' => 'mm/dd/yy',          # date format: 11/19/94
        '%X' => 'hh:mm:ss',          # time format: 21:05:57
        '%y' => 'yy',                # year (2 digits)
        '%Y' => 'year',              # year (4 digits)
        '%Z' => 'tz',                # timezone in ascii. eg: PST
        '%z' => 'tzofs',             # timezone in format -/+0000
        );
    foreach my $sym ( keys %mapping ) {
        my $string = $mapping{$sym};
        $descr =~ s|$sym|$string|g;
        }
    return $descr;
    }

sub print_help {
    my $help_target = shift;
    unless ( $help_target ) {
        exec "pod2text $0";
        }
    elsif ( $help_target =~ m/^date$/i ) {
      # print "/usr/bin/info --subnodes -o - date\n";
      # do {
      #     chdir "^";
      #     last if -e 'coreutils.info.gz';
      #     };
      # print `/usr/bin/info --f coreutils.info.gz --subnodes -o - date`;
        print `/usr/bin/info --subnodes -o - date`;
        }
    elsif ( $help_target =~ m/^date::format$/i ) {
        print `/usr/bin/man -7 Date::Format`;
        }
    else {
        print "help for $help_target not available ",
              "(try --help date, or --help Date::Format)\n";
        }
    exit;
    }


=head1 NAME

TimeSeries.get -- timeseries data to stdout

=head1 SYNOPSIS

  timeseries.get [OPTIONS]

OPTIONS:

    --from STRING
    --to STRING
    --for "NUMBER UNIT"
    --qty "NUMBER UNIT"
    --ots FORMAT_STRING
    --output-timestamp FORMAT_STRING
    --otz TIMEZONE
    --output-timezone TIMEZONE
    --hdr STRING
    --header STRING
    --tag STRING
    --help
    --help date
    --help Date::Format

=head1 DESCRIPTION

Output all or a specified range of data from a TimeSeries object. 

=head1 OPTIONS

Options start with two dashes.  If an option parameter is specified,
it can be separated from the option name by either a space or "=".
Incorrect options will raise an error, and the method will not run.

=over

=item --from STRING

=item --to STRING

STRING is a date and/or time to limit the range of data output.  The
string can be in any form supported by the date(1) -d option.

=item --for "NUMBER UNIT"

=item --qty "NUMBER UNIT"

Specifies a time interval or count for selecting output data.  Must
be used with either --from or --to (but not both).  The space between
NUMBER and UNIT may be omitted.

NUMBER is a positive integer or decimal value (only for time intervals).

UNIT can be a time unit, one of:

    second minute hour day week month year

    sec min hr wk mth yr

    s m h d w t y

or a counting unit, one of:

    record array count line row

Any of these may be plural, but any other value for UNIT raises an error.

=item --ots FORMAT_STRING

=item --output-timestamp FORMAT_STRING

Each datum timestamp will be ouput using FORMAT_STRING as a prefix to
the datum itself.  No space or other delimiter will be output between
the timestamp and datum, so must be included in the format if desired.
No timestamp will be output if this option is not specified or if an
empty string is given.  See section TIMESTAMP FORMAT CODES below, also
--help Date::Format.

An ISO 8601 timestamp is output by default, equivalent to using:

    --ots '%Y-%m-%d %H:%M:%S%z%t'

=item --otz TIMEZONE

=item --output-timezone TIMEZONE

Timestamps will be output in the specified timezone.  TIMEZONE can be
specified as an offset, with sign, hours, and minutes:

    +0000  -- no timezone offset, i.e., UTC
    -0900  -- 9 hours west of UTC (Alaska Standard Time)

or letter abbreviations may be used (but note that these may be
ambiguous and misinterpreted!):

    EST
    PDT

By default, timestamps will be output in the local time zone of
the server running the program.

=item --hdr STRING

=item --header STRING

STRING becomes the first line of output.  If --output-timestamp is
also given, that pattern is converted to a description and output 
as prefix to the header.

=item --tag STRING

optional dataset prefix, an arbitrary string

=item --help

Show this information for the TimeSeries.get method.

=item --help date

=item --help Date::Format

Show manual page for the specified utility.


=back

=head1 TIMESTAMP FORMAT CODES

Formatting is by the Perl Date::Format(3pm) module, with the following
conversion specifications supported:

=over 

=item * %% -- PERCENT

=item * %a -- day of the week abbr

=item * %A -- day of the week

=item * %b -- month abbr

=item * %B -- month

=item * %c -- MM/DD/YY HH:MM:SS

=item * %C -- ctime format: Sat Nov 19 21:05:57 1994

=item * %d -- numeric day of the month, with leading zeros (eg 01..31)

=item * %e -- numeric day of the month, without leading zeros (eg 1..31)

=item * %D -- MM/DD/YY

=item * %G -- GPS week number (weeks since January 6, 1980)

=item * %h -- month abbr

=item * %H -- hour, 24 hour clock, leading 0's)

=item * %I -- hour, 12 hour clock, leading 0's)

=item * %j -- day of the year

=item * %k -- hour

=item * %l -- hour, 12 hour clock

=item * %L -- month number, starting with 1

=item * %m -- month number, starting with 01

=item * %M -- minute, leading 0's

=item * %n -- NEWLINE

=item * %o -- ornate day of month -- "1st", "2nd", "25th", etc.

=item * %p -- AM or PM

=item * %P -- am or pm (Yes %p and %P are backwards :)

=item * %q -- Quarter number, starting with 1

=item * %r -- time format: 09:05:57 PM

=item * %R -- time format: 21:05

=item * %s -- seconds since the Epoch, UCT

=item * %S -- seconds, leading 0's

=item * %t -- TAB

=item * %T -- time format: 21:05:57

=item * %U -- week number, Sunday as first day of week

=item * %w -- day of the week, numerically, Sunday == 0

=item * %W -- week number, Monday as first day of week

=item * %x -- date format: 11/19/94

=item * %X -- time format: 21:05:57

=item * %y -- year (2 digits)

=item * %Y -- year (4 digits)

=item * %Z -- timezone in ascii. eg: PST

=item * %z -- timezone in format -/+0000

=back

Some sample formats and results:

    --ots="%s "                   ==> 1226516400 ...
    --ots="%Y-%j-%H:%M:%S "       ==> 2007-352-11:30:45 ...
    --ots='"%Y-%m-%d %H:%M:%S",'  ==> "2008-11-12 09:00:00",...

=head1 NOTES ON QUERIES

Several options are provided to control what data is selected. 

The simplest options are --from and --to, which use date -d STRING to
convert their argument to a time.  If only one of these is given, the
other is interpreted as the oldest or newest time in the dataset.

The --last option should be used with neither --from or --to, as it
implies --to "now".  Its argument can be a count or an interval value.

The --for (or --qty) option specifies a record count or time interval,
and should be used with one of --last or --to.

The intention is to keep things simple, but hopefully to support 
sensible queries.


=head1 SEE ALSO

Date::Format(3pm), Date(1),
(hint: google for ``gnu info coreutils date input formats'')

=head1 BUGS

Does not handle indirect datasets with datums stored under _/.

Use of the optional tag, an arbitrary string prefix to the dataset,
has not been tested.

Help option for info date works via the shell, but not via the webserver,
which instead shows the much less complete manual page.  The manual
page does not define the supported argument forms to -d option, while
the info docs do provide extensive detail.  Added a hint to use google
to find those docs (gnu info coreutils date input formats).

=head1 AUTHOR

Ken Irving <fnkci@uaf.edu> (c) 2008

Licensed under the GPL (Gnu Public Library)

