#!/usr/bin/perl -w
use strict;
use warnings;

use ThinObject;

use LockFile::Simple;
use Getopt::Long;
use Time::Local qw(timegm);
use Time::HiRes; # Time::HiRes::time(), Time::HiRes::gettimeofday(), ... 
use TimeSeries; # non-OO utilities are auto-imported into namespace

use constant TEMPFILE => 'datafile-under-construction';
my $obname = shift;
my $ob = ThinObject->new( $obname );

## declare variables, reading values from the object if defined:
my $tzofs = $ob->attribute('tzofs') || 0; # hours from UMT to local standard time
my $maxwidth = $ob->attribute('maxwidth'); # max data line size
my $encode_newlines = $ob->attribute('encode-newlines');
my $hi_res = $ob->attribute('hi-res');
my $time;
my $indirect; 
my $debug;
my $interval = $ob->attribute('interval');
my $tag = $ob->attribute('tag');
my $assumed_offset;
my $offset;
my $max_offset = $ob->attribute('max-offset');
my $datum_interval = $ob->attribute('datum-interval');
my $itag;
my $tsformat;
my $gzip;

## process commandline options:
use Getopt::Long;
GetOptions (
    'h'             => sub { print "see --help\n"; exit 1 },
    'help'          => sub { exec system "pod2text $0" },
    'time=s'  => \$time,
    'max-offset=s'  => \$max_offset,
    'maxwidth=s'  => \$maxwidth,
    'tzofs=s'  => \$tzofs, # time zone offset from UMT, hours
    'save-as-file'  => \$indirect,
    'blob'  => \$indirect,
    'encode-newlines'  => \$encode_newlines,
    'debug:1'  => \$debug,
    'hi-res:6'  => \$hi_res, # number of decimal places to store
    'interval=s'  => \$interval,
    'datum-interval=s'  => \$datum_interval,
    'tag=s'  => \$tag,
    'timestamp-format=s'  => \$tsformat,
    'gzip!'  => \$gzip,
    ) or die "$!\n";

my $tob = $ob->tob();

my $chunkroot = '_'; # default internal directory for multiline "chunks"

$tzofs = tz_hhmm2sec( $tzofs ); # time zone offset was in hours, now in seconds

if ( $interval ) {
    $itag = $interval; # store symbolic representation of interval, offset
    ($interval, $assumed_offset) = itag_to_interval_seconds($itag);
  # print "DEBUG: itag=$itag, interval=$interval, assumed_offset=$assumed_offset\n";
    }

my $datum = "@ARGV";
unless ( length $datum ) { ## default: read from STDIN if not argument
    my $n = 0;
    while ( <> ) {
        $datum .= $_;
        $n++;
        }
    chomp $datum if $n == 1; # maybe store inline...
    die "nothing done\n" unless $n;
    }

unless ( defined $time ) { # get current time in unix epoch seconds
    if ( $hi_res ) {
        $time = Time::HiRes::time();
        }
    else {
        $time = time();
        }
    }
elsif ( $time =~ m/^(\d{4}),(\d+)$/ ) { # --time=YEAR,SECONDS, in ``local'' tz
    $time = timegm(0,0,0,1,0,$1) + $2 - $tzofs;
    }
elsif ( $time =~ m/^(\d+)$/ ) { # --time=SECONDS, in ``local'' tz
    $time -= $tzofs;
    }
else { # ??
    die qq(TimeSeries.store: --time=$time format not supported\n);
    }

## $time is now in unix epoch seconds

my ($year, $ysec, $day, $ysec_decimal);
($year, $day) = (gmtime( int($time) ))[5, 7];
$year += 1900;                             # year
$ysec = $time - timegm(0,0,0,1,0,$year); # seconds into year (fractional?)
$day ++;                                   # day of year

if ( $hi_res ) {
    $ysec_decimal = $ysec;
    $ysec = int($ysec);
    }

die "TimeSeries.store: no year or time specified\n"
    unless defined $year && defined $ysec;
die qq(TimeSeries.store: invalid year format: "$year"\n)
    unless $year =~ m/^\d{4}$/;

## ASSERT: year and second of datum/message are fully specified

# print "DEBUG: $year: $ysec $datum\n";

if ( $interval ) { # calculate actual offset
    if ( $offset = $ysec % $interval ) { ## true if offset is non-zero
        $ysec -= $offset; # adjust ysec back to previous interval time

        if ( ! defined $datum_interval || $datum_interval eq 'previous' ) {
            # by default, the datum is referenced to the previous interval...
            }
        elsif ( $datum_interval eq 'nearest' ) {
            if ( $offset > $interval / 2 ) { # adjust ysec up to next interval time
                $ysec += $interval;
                $offset -= $interval;
                }
            }
        else {
            die  qq(TimeSeries.store: unsupported datum-interval $datum_interval\n);
            }
        }
    die qq(TimeSeries.store interval max-offset exceeded: $offset\n)
        if $max_offset && abs($offset) > $max_offset;
    
    }

## ASSERT: if interval case, ysec && offset are adjusted && set

if ( defined $maxwidth && ( length $datum > $maxwidth ) ) { 
    $indirect = 1;
    }

if ( $datum =~ m/\n/ ) {
    if ( $encode_newlines ) {
        if ( ! defined $maxwidth ||
           (  defined $maxwidth && length $datum < $maxwidth )
            ) {
            $datum =~ s/\n/\r/g;
            $indirect = 0; }
        else {
            $indirect = 1; } }
    else {
        $indirect = 1; } }

## why do this??:
undef $indirect if $hi_res;

if ( $indirect ) { ## format: TAG-SUFFIX-zzzT/TTTT; z,T = encoded year,sec 

    my %opt;

    my $chunkname = $chunkroot;
    mkdir "$tob/$chunkname" or die qq(failed to mkdir $chunkname, $!\n)
        unless -d $tob . '/' . $chunkname;
    my @path = encode_chunkname($year, $ysec, tag => $tag,
                                              suffix => $itag);
    while ( my $element = shift @path ) {
        unless ( -d $tob . '/' . $chunkname ) {
            mkdir "$tob/$chunkname" or die "failed to mkdir $chunkname, $!\n";
            }
        $chunkname .= '/' . $element;
        }
    
    if ( -e $tob . '/' . $chunkname ) { # entry already exists...
        ## ... may want to allow a --force option?
        die qq(TimeSeries.store: entry already exists for $chunkname\n);
        }
    open FILE, ">", $tob . '/' . $chunkname or die $!;
    print FILE $datum;
    close FILE;
    $datum = $chunkname;
    system "gzip $tob/$chunkname" if $gzip;
    }

if ( $interval && defined $assumed_offset ) {
    # no change to datum
    }
elsif ( $interval ) {
    # include offset seconds from nominal interval time
    $datum = $offset . ' ' . $datum;
    }
else { # non-interval case: include time in seconds as first field
    if ( $hi_res ) {
        $datum = sprintf "%.${hi_res}f %s", $ysec_decimal, $datum;
        }
    else {
        $datum = $ysec . ' ' . $datum;
        }
    }

## ASSERT: datum is now ready to be stored to file...

## configure lock object ...
my $locker = LockFile::Simple->make( 
    -delay => 7, -autoclean => 1, -warn => 0, -wfunc => undef,
    );
my $eventlock = $locker->trylock("$tob/EVENT");
unless ( $eventlock ) {
    $eventlock->release() if $eventlock;
    die "unable to aquire event lock\n"; # end this try, to maybe try again...
    }

## ASSERT: a lockfile is now set

## prepare base-32 encoded year and ysec for comparison to files:
my $ysec32 = encode_pad($ysec, 5);

my ($ysec32prev, $ysec32next); # points just before and after ysec...
if ( $interval ) {
    $ysec32prev = encode_pad($ysec - $interval, 5);
    $ysec32next = encode_pad($ysec + $interval, 5);
    }
else {
    $ysec32prev = encode_pad($ysec - 1, 5);
    $ysec32next = encode_pad($ysec + 1, 5);
    }

$tag = defined $tag ? $tag . '-' : '';

my $file;
## find the right file:
my ($y, $first, $last, $suffix);
foreach ( sort $ob->listfiles() ) {
    next unless m/^\@$tag(\d{4})-(\w{5})-(\w{5})-(.+)$/;
    ($y, $first, $last, $suffix) = ($1, $2, $3, $4);
    print "SCAN $_: $y, $first, $last, $suffix, ", decode($last), "\n"
        if $debug && $debug > 1;
    next if defined $itag && $suffix ne $itag;
    if ( defined $file ) { ## special case: join previous & this file?
        if ( $ysec32next eq $first ) {
          # $file = "join $file $_";
            $file = [$file, $_];
            }
        last;
        }
    next if $y < $year; # too early...
    if ( $y == $year && ! $interval ) { # only one non-interval file per year
        $file = $_;
        last;
        }
    last if $y > $year; # too late... no match was found
    ## ASSERT: the year, tag, and suffix all match...
    ASSERT("suffix $suffix matches interval tag $itag", $suffix eq $itag);
    ASSERT("year matches", $y == $year);
    last if $ysec32next lt $first; # datum will go into a new file
    next if $ysec32prev gt $last;  # go on and check next file...
    ## ASSERT: datum matches somewhere in current file
    $file = $_;
    next if $ysec32prev eq $last;
    last;
    }

###############################
## at this point, $file will be set if the data attaches somewhere
## to it, but also may include a second file if they are to be joined;
## otherwise, with $file undefined, a new file is called for
###############################

unless ( defined $file ) { # create a new file!
    print "creating new file...\n" if $debug;
    create_file();
    }
elsif ( $hi_res ) { # special case, non-interval only (for now at least)
    store_hi_res_somewhere_in_file($file);
    }
elsif ( ref $file eq 'ARRAY' ) { # join: file1 + datum + file2
    my ($file1, $file2) = @$file;
    print "merging two files...\n" if $debug;
    merge_files($file1, $file2);
    }
elsif ( $ysec32 lt $first ) { # prepend: datum + file
    print "prepend to file...\n" if $debug;
    prepend_to_file();
    }
elsif ( $ysec32 gt $last ) { # append: file + datum
    print "append to file...\n" if $debug;
    append_to_file();
    }
elsif ( $ysec32 eq $first ) { # duplicate or collision at first...
    print "matches first entry\n" if $debug;
    match_first_record();
    }
elsif ( $ysec32 eq $last ) { # duplicate or collision at last...
    print "matches last entry\n" if $debug;
    match_last_record();
    }
elsif ( $first lt $ysec32 && $ysec32 lt $last ) { # datum goes inside file...
    print "inserting into file\n" if $debug;
    insert_in_file();
    }
else {
    print "creating new file\n" if $debug;
    die qq(no other cases... shouldn't happen\n);
    }

print "1 record added\n" if $debug;
exit 0;

###############################
## the following subs use global values:
##   $file
##   $year $ysec $ysec32 $ysec32prev $ysec32next
##   $datum $itag
###############################

sub create_file {
    my $fname = '@' . "$tag$year-$ysec32-$ysec32-";
    $fname .= $itag ? $itag : 1; # interval tag or datum count
  # print qq(DEBUG: creating new file: "$fname"\n);
    open FILE, ">", "$tob/$fname"
        or die qq(failed to create file "$fname"\n);
    print FILE $datum, "\n";
    close FILE or die;
    print "1 record stored in $fname\n" if $debug;
    exit 0;
    }

sub merge_files {
    my $file1 = shift;
    my $file2 = shift;
    print "DEBUG: join files $file1 and\n\t\t\t  $file2 with datum at $ysec32\n";
    my ($ya, $fa, $ta, $sa) = $file1 =~ m/^\@$tag(\d{4})-(\w{5})-(\w{5})-(.+)/;
    my ($yb, $fb, $tb, $sb) = $file2 =~ m/^\@$tag(\d{4})-(\w{5})-(\w{5})-(.+)/;
    ASSERT("years match: $year $file1 $file2", $year == $ya && $ya eq $yb);
    ASSERT("datum at $ysec is between $file1 and $file2",
            $ta lt $ysec32 && $ysec32 lt $fb);
    my $newfile = '@' . "$tag$ya-$fa-$tb-";
    if ( $interval ) {
        ASSERT("$ysec32 fits between $file1 and $file2",
               $ysec32prev eq $ta && $ysec32next eq $fb);
        ASSERT("interval tags match" , $sa eq $sb && $sb eq $itag);
        $newfile .= $itag;
        }
    else { # non-interval case
        $newfile .= $sa + 1 + $sb; # new count
        }

    open FILE1, '>>', "$tob/$file1" or die $!;
    print FILE1 $datum, "\n";
    open FILE2, '<', "$tob/$file2" or die $!;
    print FILE1 $_ foreach (<FILE2>);
    close FILE2 or die $!;
    close FILE1 or die $!;
    unlink "$tob/$file2" or die $!;
    rename "$tob/$file1", "$tob/$newfile" or die $!;
    exit 0;
    }

sub prepend_to_file {
    ## pad the timestamps so that simple sorting is sufficient:
    my ($y, $f, $t, $s) = $file =~ m/^\@$tag(\d{4})-(\w{5})-(\w{5})-(.+)/;
    ASSERT("years match: $year $file", $year == $y);
    ASSERT("datum $ysec32 preceeds $file", $ysec32 lt $f);
    my $newfile = '@' . "$tag$y-$ysec32-$t-";
    if ( $interval ) {
        ASSERT("$ysec32 fits before $file", $ysec32next eq $f);
        ASSERT("interval tags match" , $s eq $itag);
        $newfile .= $itag;
        }
    else { # non-interval case
        $newfile .= $s + 1; # new count
        }
    open PREPEND, '>', "$tob/$newfile" or die $!;
    print PREPEND $datum, "\n";
    open FILE, '<', "$tob/$file" or die $!;
    print PREPEND $_ foreach (<FILE>);
    close FILE or die $!;
    close PREPEND or die $!;
    unlink "$tob/$file" or die $!;
    }

sub append_to_file {
    ## pad the timestamps so that simple sorting is sufficient:
    my ($y, $f, $t, $s) = $file =~ m/^\@$tag(\d{4})-(\w{5})-(\w{5})-(.+)/;
    ASSERT("years match: $year $file", $year == $y);
    ASSERT("datum $ysec32 follows $file", $ysec32 gt $t);
    my $newfile = '@' . "$tag$y-$f-$ysec32-";
    if ( $interval ) {
        ASSERT("$ysec32 fits after $file", $ysec32prev eq $t);
        ASSERT("interval tags match" , $s eq $itag);
        $newfile .= $itag;
        }
    else { # non-interval case
        $newfile .= $s + 1; # new count
        }
    open APPEND, '>>', "$tob/$file" or die $!;
    print APPEND $datum, "\n";
    close APPEND or die $!;
    rename "$tob/$file", "$tob/$newfile" or die $!;
    }

sub match_first_record {
    open FILE, "<", "$tob/$file" or die $!;
    chomp (my $record = <FILE>);
    if ( $record eq $datum ) {
        print "duplicate entry\n";
        exit 0; # should probably return a specific error value
        }
    ## ASSERT: same timestamp, different message
    die "timestamp collision in $file; no changes made\n" .
        "  OLD: $record\n  NEW: $datum\n";
    }

sub match_last_record {
    chomp( my $record = `tail -n 1 "$tob/$file"` );
    if ( $record eq $datum ) {
        print "duplicate entry\n";
        exit 0; # should probably return a specific error value
        }
    ## ASSERT: same timestamp, different message
    die "timestamp collision in $file; no changes made\n" .
        "  OLD: $record\n  NEW: $datum\n";
    }

sub insert_in_file {
    return match_in_interval_file() if $interval;
     ## continuing for non-interval file...
    my ($y, $first, $last, $count) = $file =~
        m/^\@$tag(\d{4})-(\w{5})-(\w{5})-(.+)/;
    ASSERT("$ysec32 entry is in $file", $first le $ysec32 && $ysec32 le $last);

  # print qq(DEBUG: inserting entry into "$file"\n);
    $count += 1;
    my $newfile = '@' . "$tag$y-$first-$last-$count";
    open NEWFILE, ">", "$tob/$newfile"
        or die qq(failed to create file "$newfile"\n);
    open OLDFILE, "<", "$tob/$file"
        or die qq(failed to open file "$file"\n);
    ## copy data until new entry slot is reached:
    my $oldentry;
    while ( $oldentry = <OLDFILE> ) {
        my ($t) = $oldentry =~ m/^(\d+)/;
        last if $t > $ysec; # continue below to insert new record, etc.
        if ( $t == $ysec ) {
            close NEWFILE;
            unlink "$tob/$newfile" or die $!;
            chomp $oldentry;
            if ( $oldentry eq "$ysec $datum" ) {
                print "duplicate record\n";
                exit 0;
                }
            ## ASSERT: same timestamp, different message
            die "timestamp collision in $file; no changes made\n" .
                "  OLD: $oldentry\n  NEW: $ysec $datum\n";
            }
        print NEWFILE $oldentry;
        }
    ASSERT('have entry from old file', defined $oldentry);
    print NEWFILE $datum, "\n";
    print NEWFILE $oldentry;
    print NEWFILE (<OLDFILE>);
    close NEWFILE or die #!;
    close OLDFILE or die #!;
    system('sync'); ## ...seems to be necessary, else unlink sometimes fails
    unlink "$tob/$file" or die $!;
    }

sub store_hi_res_somewhere_in_file { # called only for non-interval hi-res case
    my ($y, $first, $last, $count) = $file =~
        m/^\@$tag(\d{4})-(\w{5})-(\w{5})-(.+)/;
  # ASSERT("$ysec32 entry is in $file", $first le $ysec32 && $ysec32 le $last);

  # print qq(DEBUG: inserting entry into "$file"\n);
    open NEWFILE, ">", "$tob/" . TEMPFILE or die $!;
    open OLDFILE, "<", "$tob/$file"
        or die qq(failed to open file "$file"\n);
    ## copy data until new entry slot is reached:
    my $oldentry;
    while ( $oldentry = <OLDFILE> ) {
        my ($t) = $oldentry =~ m/^(\d+(\.\d+)?)/;
        last if $t > $ysec_decimal; # continue below to insert new record, etc.
        if ( $t == $ysec_decimal ) { # should be very unlikely...
            close NEWFILE;
            unlink "$tob/" . TEMPFILE or die $!;
            chomp $oldentry;
            if ( $oldentry eq "$ysec_decimal $datum" ) {
                print "duplicate record\n";
                exit 1;
                }
            ## ASSERT: same timestamp, different message
            die "timestamp collision in $file; no changes made\n" .
                "  OLD: $oldentry\n  NEW: $ysec $datum\n";
            }
        print NEWFILE $oldentry;
        }
    ASSERT('have entry from old file', defined $oldentry);
    print NEWFILE $datum, "\n";
    print NEWFILE $oldentry if defined $oldentry;
    print NEWFILE (<OLDFILE>);
    close NEWFILE or die #!;
    close OLDFILE or die #!;
    system('sync'); ## ...seems to be necessary, else unlink sometimes fails
    unlink "$tob/$file" or die $!;
    $count += 1;
    $first = $ysec32 if $ysec32 lt $first;
    $last = $ysec32 if $ysec32 gt $last;
    my $newfile = '@' . "$tag$y-$first-$last-$count";
    rename "$tob/" . TEMPFILE, "$tob/$newfile" or die $!;
    }

sub match_in_interval_file {
    my ($y, $first, $last, $suffix) = $file =~
        m/^\@$tag(\d{4})-(\w{5})-(\w{5})-(.+)/;
    ASSERT("$ysec32 entry is in $file", $first le $ysec32 && $ysec32 le $last);

    ## for interval file, the new entry must conflict with existing...
    ## unless/until a --force option is available, this op must fail
    ## but we'll check to see if the entries differ or match...

    open FILE, "<", "$tob/$file"
        or die qq(failed to open file "$file"\n);
    ## copy data until new entry slot is reached:
    my $t = decode($first);
    while ( my $entry = <FILE> ) {
        if ( $t == $ysec ) { # got it!
            chomp $entry;
            if ( $entry eq $datum ) {
                print "duplicate record\n";
                exit 0;
                }
            ## ASSERT: same timestamp, different datum
            die "timestamp collision in $file; no changes made\n" .
                "  OLD: $entry\n  NEW: $ysec $datum\n";
            }
        $t += $interval;
        }
    die qq(shouldn't get here...\n);
    close FILE or die $!;
    }

__END__

=head1 NAME

store -- TimeSeries store method

=head1 DESCRIPTION

The TimeSeries thinobject class stores data in list properties, flat files
with ``@'' as the first character, one line per each datum.  A separate file
is used (at least) for each year. 

=head1 INTERNAL DETAILS

TimeSeries uses seconds from the start of the year as its basic timestamp
unit, in the UTC timezone.  Data is stored in list properties (files)
of the form:

    @YEAR-TIME1-TIME2-SUFFIX

or:
    @TAG-YEAR-TIME1-TIME2-SUFFIX

The TAG can be any string value, and is set by the --tag option or
tag attribute.  The tag is not otherwise used by the timeseries class,
but may be of some use to client applications.

The SUFFIX value is either the count of entries in the data file or
the interval tag if interval is set.

Year and time values are encoded using a particular base-32 character
set in order to reduce filename sizes.  The encoding skips a few letters:

    0123456789abcdefghjkmnpqrstvwxyz
    0         1         2         3
    01234567890123456789012345678901

The base-32-encoded year values are 3 characters long, but the time
values (in seconds from the start of the year) are zero-padded to 5
characters so that normal sorting is sufficient to put the files in
temporal order.



=head1 OPTIONS

=over

=item --blob

Store data from standard input as a file.  This will happen by default
if multiple lines are input (except: see --encode-newlines).

=item --gzip

Compress blob file in place.

=item --timestamp-format FORMAT

The timestamp will be parsed from each 




=item --time=now

This is the default (i.e., if no --time option is given).  The current
time is assumed, expressed internally in the standard *nix seconds from
the ``epoch'', and relative to the UTC timezone.

=item --time=YEAR,SECONDS

The time here is assumed to be in ``local'' time, with 4-digit year
and time in seconds since the start of the year given.   The B<tzofs>
attribute or the --tzofs value is used to adjust the given time to UTC.

=item --time=SECONDS

This form is perhaps ambiguous, but the given seconds-from-epoch will
be assumed to be in ``local'' time, and, as above, adjusted using the
tzofs attribute or option.


=item --tzofs=[S]HHMM

The option value will override the B<tzofs> attribute, if set, to 
establish the timezone offset from UTC assumed for the given time
in the store operation.


=back


=head1 BUGS

It may be reasonable to store single datums in a file of the form:

    @YEAR-TIME

but it is not clear to me that this should be done using a list 
property, since that list would be completely different from the
ordinary YEAR-TIME1-TIME2 case.


=head1 AUTHOR

Ken Irving <fnkci@uaf.edu> (c) 2006

Licensed under the GPL (Gnu Public Library)

