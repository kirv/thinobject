#!/bin/bash

echo $0 is deprecated, do not use 1>&2 
exit 1

#!/usr/bin/perl -w
use strict;
use warnings;

use ThinObject;
use LockFile::Simple;
use Getopt::Long;
use Time::Local qw(timegm);
use TimeSeries; # non-OO utilities are auto-imported into namespace

use constant TEMPFILE => 'datafile-under-construction';
my $ob = ThinObject->new( '.' );

## declare variables, reading values from the object if defined:
my $tzofs = $ob->attribute('tzofs') || 0; # hours from UMT to local standard time
my $debug;
my $interval = $ob->attribute('interval');
my $tag = $ob->attribute('tag');
my $assumed_offset;
my $offset;
my $max_offset = $ob->attribute('max-offset');
my $itag;
my $verbose;
my $test_run;

## process commandline options:
use Getopt::Long;
GetOptions (
    'h'             => sub { print "see --help\n"; exit 1 },
    'help'          => sub { exec system "pod2text $0" },
    'max-offset=s'  => \$max_offset,
    'verbose+'  => \$verbose,
    'intervals=s'  => sub { parse_intervals($_[1]) },
    'tag=s'  => \$tag,
    'test-run'  => \$test_run,
    ) or die "$!\n";

$tag = $tag ? "$tag-" : '';

my $tob = $ob->tob();

## hard-code intervals for now:
my %intervals = ( # look for this/these interval(s) in the streamed data
      120  => [  '2m-0s', 0 ],
      300  => [  '5m-0s', 0 ],
      900  => [ '15m-0s', 0 ],
     1800  => [ '30m-0s', 0 ],
     3600  => [  '1h-0s', 0 ],
     7200  => [  '2h-0s', 0 ],
    10800  => [  '3h-0s', 0 ],
    14400  => [  '4h-0s', 0 ],
    21600  => [  '6h-0s', 0 ],
    43200  => [ '12h-0s', 0 ],
    86400  => [  '1d-0s', 0 ],
    );

###############################
## read stream of single-line entries from file or standard input,
###############################

my $entry = <>;
my $n = 0;
my ($year, $ysec) = $entry =~ m/^(\d{4}) (\d{1,8}) /;
my ($last_year, $last_ysec) = ($year, $ysec);
my @data = ( $entry );
my @no_match = (0);

while ( $entry = <> ) {
    $n += 1;
    push @data, $entry;
    ($year, $ysec) = $entry =~ m/^(\d{4}) (\d{1,8}) /;
    die "invalid entry, line $n:\n$entry\n" unless $year && $ysec;
    if ( $year != $last_year ) { # no dataset spans a year...
        $last_year = $year;
        undef $last_ysec;
        next;
        }

    my $interval = $ysec - $last_ysec;
    die "dataset not in temporal order at line $n\n" if $interval < 0;

  # print "$interval\n";

    unless ( exists $intervals{$interval} ) {
        push @no_match, $n;
        }
    else { # an interval matches!
        my $last = $intervals{$interval}->[-1]; # [from,to] or last $n
        unless ( defined $last ) { # first visit to this interval...
          # print "undefined...\n";
            $intervals{$interval}->[-1] = $n; 
            }
        elsif ( ref $last eq '' ) { # discontiguous range...
          # print "scalar: n=$n, last=$last, ", scalar @data, "\n";
            if ( $last == $n - 1 ) { # start a range!
                $intervals{$interval}->[-1] = [ $last, $n ]; 
                }
            else { # not contiguous, so just replace last-visited with $n
                $intervals{$interval}->[-1] = $n; 
                }
            }
        elsif ( ref $last eq 'ARRAY' ) { # contiguous range: [ $n, $m ]
          # print "array @$last...\n";
            if ( $last->[1] == $n - 1 ) { # continue...
                $last->[1] = $n;
                }
            else { # not contiguous, so end that range
              # push @$last, $n; # note: scalar value here!
                push @{$intervals{$interval}}, [$n-1, $n]; 
                }
            }
        else { # neither array nor scalar...?  shouldn't happen
          # print "?????...\n";
            die "failing on $last ". ref $last;
            }
        }
    $last_ysec = $ysec;
    }

my %existing_interval_files;
## get a list of existing files matching the $tag prefix:
foreach ( scan_tag_files($tag) ) {
    ## ASSERT: file matches tag
    my ($suffix) = m/\@$tag\d{4}-\w{5}-\w{5}-(.+)$/;
    next if $suffix =~ m/^\d+$/; # a count, not an interval
    push @{$existing_interval_files{$suffix}}, $_; # key is interval
    }

## now check the results...
print "records not matched with an interval: @no_match\n";
my @files_to_write;
foreach my $h ( keys %intervals ) {
    my ($itag, @sets) = @{$intervals{$h}};
    next unless $sets[0]; 
    print "$itag ($h): ", scalar @sets, " sets\n";
    die "interval $itag files already exist\n"
        if exists $existing_interval_files{$itag}; # harsh, but safe
    foreach my $range ( @sets ) {
        unless ( defined $range ) {
            print "\tno match\n";
            }
        elsif ( ref $range eq '' ) {
            print "\tno match\n";
            }
        elsif ( ref $range eq 'ARRAY' ) {
            my ($n, $m) = @$range;
            print "\tfrom $n to $m\n";
            push @files_to_write,
                [ interval_dataset_filename($itag, $n, $m), $n, $m ];
            }
        else {
            die $range;
            }
        }
    }

exit 0 if $test_run;

## now write the files!!
foreach ( @files_to_write ) {
    my ($fname, $n, $m) = @$_;
    my $count = $m - $n + 1;
    open DATASET, ">", $tob . '/' . $fname or die $!;
    while ( $n <= $m ) {
        my ($datum) = $data[$n] =~ m/^\d{4} \d{1,8} (.*)/;
        $datum = '' unless defined $datum;
        print DATASET $datum, "\n";
        $n += 1;
        }
    close DATASET or die $!;
    print "$count records stored into $fname\n";
    }

exit 0;

################################
## subroutines follow
################################

sub interval_dataset_filename {
    my $itag = shift;
    my $from_index = shift;
    my $to_index = shift;
    my ($from_year, $from_ysec) = $data[$from_index] =~ m/^(\d{4}) (\d{1,8}) /;
    my ($to_year, $to_ysec) = $data[$to_index] =~ m/^(\d{4}) (\d{1,8}) /;
    die "years mismatch: $from_year, $to_year\n" unless $from_year == $to_year;

    my $fname = sprintf '@%s%4d-%05s-%05s-%s',
        $tag, $to_year, encode($from_ysec), encode($to_ysec), $itag;

  # print "want to store ", $to_index-$from_index+1, " records in $fname\n";
    return $fname;
    }

sub scan_tag_files {
    my $tag = shift;
    my @existing;
    foreach ( sort $ob->listfiles() ) {
        next unless m/\@$tag\d{4}-/; 
        push @existing, $_;
        }
    return @existing;
    }

__END__

=head1 NAME

guess-interval -- TimeSeries guess-interval method

=head1 SYNOPSIS

    tob ob.get last 2 days | tob ob.guess-interval -i 15m

=head1 DESCRIPTION

Analyze a data stream where each line is of the form:

    YEAR YEAR-SECOND DATUM

and store data found to match a given interval.  Unmatched data is 
ignored.  

The interval criterion must be exactly met for a match to occur.


=head1 INTERNAL DETAILS




=head1 OPTIONS

=over

=item --intervals VALUE[,...]

VALUE is a time interval and optional offset of the form: 

    NUMBER TAG

or

    NUMBER TAG - NUMBER TAG

Examples: 1h, 1h-0s

=back


=head1 BUGS


=head1 AUTHOR

Ken Irving <fnkci@uaf.edu> (c) 2008

Licensed under the GPL (Gnu Public License)

