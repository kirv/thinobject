#!/bin/bash

# tob -- thinobject 'enabler' program
# Copyright (C) 2010 Ken Irving
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

warn () {
    test -z "$QUIET" && printf "%s\n" "$@" >&2
    }

error () {
    # synopsis: error [-x N] OUTPUT_LINE ...
    local -i n=1
    test "$1" = -x && n=$2 && shift 2
    warn "$@"
    exit $n
    }
export -f error

resolve_library () {
    for lib in ${TOBLIB/:/ }; do
        test -d $lib/$1 && path=$lib/$1 && return
    done
    return 1
    }

resolve_search_paths () { # resolve (proto)type(s) into types[], apaths[], mpaths[]
    local type=$1 && shift
  # warn " " "    RESOLVE: $type"
    local path
    shopt -s nullglob
    while test -n "$type"; do
      # warn "        CHECKING: $type"
        if test -d "$type"; then
            # ... a 'prototype' only provides attributes, not methods
            path=$type
            apaths+=($path)
        else
            resolve_library $type || return 1
            types+=($type)
            apaths+=($path)
            mpaths+=($path)
        fi
        unset type
      # warn PATH: $path

        for mixin in $path/{,.}^?*; do # ... e.g., ^Cron or .^settings, etc.
          # warn MIXIN: $mixin
            test -z "$TOB_NO_MIXINS" || break
            test -L $mixin || continue # ... skip if not a symlink

            if test -d $mixin; then # ... prototype object
                mixin=$(readlink $mixin)
                if test ${mixin:0:1} = /; then # ... absolute path
                    resolve_search_paths $mixin
                else
                    resolve_search_paths $path/$mixin
                fi
            else # does not resolve, so assume it's a type
                resolve_search_paths $(readlink $mixin)
            fi
        done

        test -n "$1" && type=$1 && shift && continue # ... use arg for type
        test -L $path/^ && type=$(readlink $path/^)
        test -L $path/.^ && type=$(readlink $path/.^)
    done
    test -n "$apaths[*]" || return 1
    test -n "$mpaths[*]" || return 2
    }

resolve_declaration () { 
    #   synopsis: resolve_declaration path object
    #   return 0 if declaration found and type identified
    #   return 1 if no declaration found
    local path=$1 object=$2 p
    for p in "${apaths[@]}"; do
        for symvar in $p/$object $p/.$object; do
            test -L $symvar -a ! -e $symvar || continue
            type=($(readlink $symvar))
            test -n "$type" && test ${type:0:1} != '=' && return
        done
    done
    return 1
    }


resolve_object () { # try to resolve path, object, type, and method from query
  # echo "QUERY: $1"
    local -a query=${1//\//\/.}         # substitute /. for /
    query=(${query//./ })               # split on dot into array
  # echo "QUERY: ${query[*]}"
    test ${query:0:1} = / && path='' || path=.
    local -i i p=0 n=${#query[*]}
    for (( i=0; i<n; i+=1 )); do 
        dir="${query[*]:i-p:p+1}"       # p previous elements + element i
        dir=${dir// /.}                 # change "a b" to "a.b"
        test -d $path/$dir && path+=/$dir && p=0 && continue
        test ${dir: -1:1} = / && return 1
        test -d $path/.$dir && path+=/.$dir && p=0 && continue
        p+=1
    done
    i=n-p  # i now points to element past path portion, i.e., the object

  # echo " PATH: $path"
  # echo "    i: $i"

    # existing attribute search path is useful only if path is .
    test -n "${apaths[*]}" -a $path != . && apaths=()

    test -n "${apaths[*]}" || resolve_search_paths $path || {
        test $? -eq 1 && return 1
        }

    # work back from all-object + no-method to no-object + all-method
    # m will start at the last query element, then decrement on each pass
    # object is extracted from query[i] to query[m]
    local -i m
    for (( m=n-1; m>=i; m+=-1 )); do
        # index m points to last element of object in query
        object="${query[*]:i:m-i+1}"
        object=${object// /.}
      # echo "RESOLVE_DECLARATION $path $object ... is it an object?"
        resolve_declaration $path $object && {
            # success, so what is the method...?
            method="${query[*]:m+1}"
            method=${method// /.}
            test -n "$method" || method=default
          # printf "%s\t%s\n" CASE A PATH $path  TYPE "${type[*]}"  OBJECT $object  METHOD "<$method>"
            break
            }
    done

    return

    # if $path itself is a dir object with a ^ link, we're done:
    test -L $path/^ -o -L $path/.^ && {
        type=$(readlink $path/^ || readlink $path/.^)
      # echo LINK in $path for TYPE $type
        method="${query[*]:i}"
        method="${method// /.}"
      # printf "%s\t%s\n" CASE B PATH $path  TYPE "$type"  METHOD $method
        cd $path || return 2
        TOB_path_to_object=$path
        TOB_method=$method
        }

    }


cull_duplicate_paths () {
    local entry
    local unique
    declare -i i
    # arrays types and mpaths are 1:1, so scan types, discard from both
    for (( i=${#types[@]}; i>=0; i-- )); do
        entry=${types[$i]}
        test "${unique/$entry/}" = "$unique" || {
            # this entry already scanned
            unset types[$i]
            unset mpaths[$i]
            continue
            }
        unique+=" $entry"
    done
    unset unique
    # apaths array can include duplicates, so scan & discard, leaving last
    for (( i=${#apaths[@]}; i>=0; i-- )); do
        entry=${apaths[$i]}
        test "${unique/$entry/}" = "$unique" || {
            # this entry already scanned
            unset apaths[$i]
            continue
            }
        unique+=" $entry"
    done
    }

resolve_method_path () {
    local method=$1
    # uses global super, i.e., count of how many times to skip matched method
    for path in ${mpaths[@]}; do
        test -x $path/$method && {
            test $super -gt 0 && super+=-1 && continue
            TOB_method_path=$path/$method
            return
            }
    done
    return 1
    }

TOB_resolve_method_path () {
    local method=$1
    local -i super=0
    echo looking for $method >2
    while test "${method:0:6}" = "super."; do
        method=${method:6}
        super+=1
    done
    for path in ${TOB_method_paths//:/ }; do
        test -x $path/$method && {
            test $super -gt 0 && super+=-1 && continue
            TOB_method_path=$path/$method
            return
            }
    done
    return 1
    }

TOB_get_attr () {
    # set variable 'attr' to attribute value(s), or return false
    # if $arg matches a file, scalar attr is set to its contents
    # if file(s) matches $arg=value, array attr is set to value(s)
    local arg=$1 path file
    test -n "$arg" || return 1
    for path in ${TOB_search_paths//:/ }; do
        test -e "$path/$arg" && attr=$(<$path/$arg) && return
        file=($path/$arg=*)
        test "${file: -1}" = '*' && continue
        attr=(${file[@]#$path/$arg=}) && return
    done
    return 1
    }

main () {
    test -n "$TOBLIB" || error -x 102 "TOBLIB is not set"
    ## process argument list options:
    declare path= object= method=
    declare -a args=() types=() mpaths=() apaths=() attr=()
    declare -i super=0
    arg=$1 && shift
    while test "${arg:0:1}" = -; do # handle option...
        case $arg in
            -q | --quiet)       QUIET=1;        opt="$opt -q" ;;
            -v | --verbose)     VERBOSE=1;      opt="$opt -v" ;;
            -d | --debug)       DEBUG=1;        opt="$opt -d" ;;
            -h | --help)        exec awk '/^NAME$/,0' $0 ;;
            -a | --arg)         args+=($1) && shift ;;
            -m | --method)      method=$1 && shift
                test $method || error -x 101 "no method argument" ;;
            *) error -x 102 "unsupported option $arg" ;;
        esac
        arg=$1 && shift # try again...
    done
    
    test -n "$arg" || error -x 103 "no object specified"
    
    test -n "$method" && method_option $arg "$@"  # ... will not return!

    test ${arg/.//} = $arg && # no dot found, so exec as, i.e., self.method
        exec $0 ..$arg "$@"

    declare -x TOB_caller_path=$PWD

    # set: path, object, method, super

    resolve_object $arg # will set: path, object, method, super
    return_status=$?

  # case $return_status in
  # 1)  error -x 111 "failed to cd to $object at $TOB_path_to_object" ;;
  # 2)  error -x 112 "$object at $TOB_path_to_object is $type" ;;
  # 3)  error -x 113 "broken symlink: $object at $TOB_path_to_object" ;;
  # 4)  error -x 114 "no $object type at $TOB_path_to_object" ;;
  # 6)  test -z "$TOBLIB_NOT_OBJECT" ||
  #         error -x 116 "failed to resolve $object"
  #     # ok to try to resolve tob library class as object
  #   # warn "TRY TO RESOLVE library class as object"
  #     # first dot-delimited element must exist as a directory
  #     prefix=${object%%.*}
  #     for toblib in $TOBLIB; do
  #         test -d $toblib/$prefix/ || continue
  #         exec $0 $toblib/$object.$method 
  #         # to fix: the above exec call is missing args...
  #     done
  #     error -x 117 "failed to resolve $object"
  #     ;;
  # esac
    
    test -n "$DEBUG" && printf "DEBUG: %15s = %s\n" \
        object $object      method $method    super $super \
        TOB_caller_path $TOB_caller_path \
        args1 "${args[*]}"  args2 "$*"
   
exit 118
    
    ## a couple of assertion checks, probably redundant:
    test -n "$type" ||
        error -x 118 "failed to resolve $object type"
    test -n "$TOB_path_to_object" ||
        error -x 119 "failed to resolve path to $object"
    
    test -n "$DEBUG" && { # all of these should now be set:
        warn "DEBUG: type=$type"
        warn "DEBUG: TOB_path_to_object=$TOB_path_to_object"
        warn "DEBUG: calling: resolve_search_paths . $type"
        }
    
    # resolve_paths() builds arrays: types and paths, recursing on mixins
    # - first of 2 args is the object, not class, may include mixins
    # - types array is 1:1 with path after skipping paths[0]
    declare -a types=() mpaths=() apaths=()
    if test -n "${attr[*]}"; then
        unset attr[0]   # this is type, any other entries are envars
      # warn "CASE 1: resolve_search_paths $type"
        resolve_search_paths $type
      # warn "TYPES:  <${types[@]}>"
      # warn "APATHS: <${apaths[@]}>"
      # warn "MPATHS: <${mpaths[@]}>"
        object=$TOB_path_to_object
    else
      # warn "CASE 2"
        unset attr[0]   # this is type, any other entries are envars
        resolve_search_paths . $type
    fi

    test -n "$DEBUG" && { # all of these should now be set:
        warn "DEBUG: TYPES=<$types>,    ${#types[*]} entries"
        warn "DEBUG: MPATH=<$mpaths>, ${#mpaths[*]} entries"
        warn "DEBUG: APATH=<$apaths>, ${#apaths[*]} entries"
        }
    
    test -n "$types" || {
        test "${#apaths[@]}" -gt 1 &&
            error -x 120 "prototype but no type resolved for $object"
        error -x 121 "no type or prototype resolved for $object"
        }

    test -n "$DEBUG" && { # all of these should now be set:
        warn "DEBUG: top types=<$types>,    ${#types[*]} entries"
        warn "DEBUG: top mpaths=<$mpaths>, ${#mpaths[*]} entries"
        warn "DEBUG: top apaths=<$apaths>, ${#apaths[*]} entries"
        }
    
    test "$types" || {
        test "${#apaths[@]}" -gt 1 &&
            error -x 120 "prototype but no type resolved for $object"
        error -x 121 "no type or prototype resolved for $object"
        }

    # arrays may have duplicate entries, so leave only the last such entry
    cull_duplicate_paths
    
    ## export thinobject variables
    export TOB_object=$object
    export TOB_method=$method
    export TOB_type=$type
    export TOB_class_path
    export TOB_caller_path
    export TOB_caller_path_to_object=$TOB_path_to_object
    
    ## export thinobject utility functions and associated variables:
    export -f TOB_resolve_method_path
    export TOB_method_path
    export -f TOB_get_attr
    
    # create pseudo-arrays for export, with colon as delimiter:
    save_IFS="$IFS"
    IFS=:
    export TOB_search_paths="${apaths[*]}"
    export TOB_method_paths="${mpaths[*]}"
    export TOB_type="${types[*]}"
    IFS="$save_IFS"
    
    test -n "$DEBUG" && {
        warn "DEBUG: TOB_search_paths=$TOB_search_paths"
        warn "DEBUG: TOB_method_paths=$TOB_method_paths"
        warn "DEBUG: TOB_type=$TOB_type"
        }
    
    for envar in "${attr[@]}"; do
        tag=${envar%%=*}
        test $tag = $envar && continue
        val=${envar#*=}
        export $tag=$val
    done
    
    resolve_method_path $TOB_method &&
        exec $TOB_method_path "${args[@]}" "$@"
    
    ## no executable method was resolved, so try some built-ins:
    
    test $TOB_method = path && {
        test -z "$*" && echo $TOB_path_to_object/
        for arg in $*; do
            test -e $arg ||
                error -x 121 "$arg not found"
            echo $TOB_path_to_object/$arg
        done
        exit
        }
    
    test "$TOB_method" = "type" &&
        echo $TOB_type &&
            exit
    
    ## no method was found, so check for _default method...
    
    for path in ${mpaths[@]}; do
        ## ASSERT: class exists
        test -e $path/_default && {
            test -x $path/_default && {
              # warn "DEBUG tob: exec $path/_default $TOB_object $TOB_method $*"
                exec $path/_default $TOB_method "$@"
                }
            ## ASSERT: _default exists but is not executable
            ## maybe it can contain a recipe to be executed?
            error -x 122 "non-executable _default method found"
            }
    done
    
    error -x 123 "no method $TOB_method found"
    } # end main()

main "$@"

exit
NAME
    tob -- parse and resolve object.method, invoke method in object directory

SYNOPSIS
    tob [OPTIONS] object.method [METHOD_OPTIONS] [ARGUMENTS]
    tob -m method [-a arg]... object...

DESCRIPTION
    Thinobject strives to achieve object oriented programming and data
    management directly on the filesystem, in a language-independent way.
    Methods are executable programs, written in any language.  Thinobject
    uses a symlink, .^ or ^, to a class directory (or handler).  Methods
    and attributes are searched for along the chain of class links.

EXIT VALUE
    Exit value should be 0 if no error occurred, but should have a value
    from 101 to 123 if there was an error.  The numbers are assigned
    sequentially in the tob script, and for now that's the only documentation
    for what specific values mean.

OPTIONS
    -d
    --debug
    turn on debug output

    -v
    --verbose
    turn on verbose output

    -m M
    --method M
    apply method M to the following list of objects    

    -a ARGS...
    --arg ARGS...
    provide arguments; useful in conjunction with the --method option

    -h
    --help
    show this help screen (manpage)

    -q
    --quiet
    suppress output to stderr on errors
    
OBJECT CREATION
    Use tob-new to create objects.

BUILT-IN METHODS
    path
        output the object directory path

    type
        output the class hierarchy

PROPERTIES
    The thinobject system uses ordinary files and directories in the
    filesystem, so the content of an object is arbitrary.  It may be
    convenient/helpful to think of the contents of an object as its
    ``properties'', if only to distinguish them from otherwise ordinary
    files (which they really are).

    Special meaning is applied to certain files, as follows:

    ^
    .^
    symlink to the parent class

    ^foo
    .^foo
    symlink to a mixin class


SEARCH PATHS
    tob prepares a search path for methods and one for attributes.
    These differ mainly in that methods are not resolved in the object,
    while attributes may be.

    Mixin classes are searched before the parent class, in lexical 
    order.  Common ancestor classes are searched last. 

EXPORTED VARIABLES
    TOB_object -- the object name as passed to the thinob enabler

    TOB_method -- the invoked method

    TOB_type -- the nominal class name

    TOB_class_path -- the class directory or handler path

    TOB_object_path -- the fully resolved object name

    TOB_search_paths -- search paths for object attributes

    TOB_method_paths -- search paths for object methods

    TOB_caller_path

    TOB_caller_path_to_object

    TOB_path_to_object

EXPORTED FUNCTIONS
    TOB_resolve_method_path
    TOB_get_attr

   output format is: $TOB_object.$TOB_method: ARGUMENTS...

SEE ALSO
    tob-new --help
    tob-del --help
    Ideally, each thinobject class will provide a help method, and a
    --help option to each of its methods.

BUGS
    This is an experimental system.

    Not sure the --quiet option is working quite right...

    Should document all exit values.

AUTHOR
    Ken.Irving@alaska.edu (c) 2007-2010
