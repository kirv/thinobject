#!/bin/bash
# tob -- thinobject 'enabler' program
# Copyright (C) 2010 Ken Irving
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

warn () {
    test -z "$QUIET" && printf "%s\n" "$*" >&2
    }

error () {
    exitvalue=1
    test -n "$1" -a $1 = --exit && shift && exitvalue=$1 && shift
    warn "$*"
    exit $exitvalue
    }

get_type () {
    #               set TOB_path_to_object from arg 1
    #               set TOB_type after analysis
    #               cd into dir object, return 0, or 1 if cd failed 
    #               return 2 for regular or special file
    #               return 3 for symbolic link that does not resolve
    #               return 4 if no type identified
    #
    TOB_path_to_object=$1
    unset TOB_type
    type="$(stat -L -c %F $TOB_path_to_object 2> /dev/null)"
    case "${type%% *}" in                   # first word from stat(1) filetype
        directory)
            TOB_type=Directory
            # TODO: check xattr tob.^ for type
            test -L $TOB_path_to_object/.^ && TOB_type=$(readlink $TOB_path_to_object/.^)
            test -L $TOB_path_to_object/^ && TOB_type=$(readlink $TOB_path_to_object/^)
            cd $TOB_path_to_object 2> /dev/null || return 1
            return
            ;;
        regular)   TOB_type=File;;
        socket)    TOB_type=Socket;;
        fifo)      TOB_type=NamedPipe;;
        block)     TOB_type=BlockSpecial;;
        character) TOB_type=CharacterSpecial;;
    esac
    test -n "$TOB_type" && return 2
    test -L $arg && TOB_type=SymLink && return 3
    return 4
    }

resolve_object () { 
    #               return values 0 to 4 are from get_type()
    #               get_type() sets TOB_type, TOB_path_to_object
    #               return 5 if $hidden > 0 and --no-hidden was given
    #               return 6 if unable to resolve anything
    #
    local obspec=$1
    local path=. # assume path is relative
    declare -i hidden=0
    test ${obspec:0:1} = / && path="" # no, path is absolute
    unset prefix
    for elem in ${obspec//./ }; do          # split into elements on dots
        test -n "$prefix" && elem=$prefix.$elem && unset prefix
        if test ${elem: -1:1} = /; then     # element is explicitly a directory
            path+=/${elem%/}
        elif test -d $path/$elem; then      # dot-terminated directory
            path+=/$elem
        elif test -d $path/${elem%/*}/.${elem##*/}; then # hidden directory
            path="$path/${elem%/*}/.${elem##*/}"
            hidden+=1
        elif test -d $path/.$elem; then # hidden directory
            path="$path/.$elem"
            hidden+=1
        elif test -L $path/$elem; then      # hidden dir behind symlink?
            target="$(readlink -f $path/$elem)"
            leaf="${target##*/}"
            target="${target%/*}"
            if test -d "$target/.$leaf"; then
                path="$target/.$leaf"
                hidden+=1
            else
                prefix=$elem
            fi
        elif test -L $path/.$elem; then     # hidden dir behind hidden symlink?
            target=$(readlink -f $path/.$elem)
            leaf=${target##*/}
            target=${target%/*}
            if test -d $target/.$leaf; then
                path=$target/.$leaf
                hidden+=1
            else
                prefix=$elem
            fi
        else
            prefix=$elem
        fi
    done
    test $hidden -gt 0 && test -n "$NO_HIDDEN" && return 5
    test -z "$prefix" && {  # a directory object was resolved
        get_type $path
        return
        }

    # a Directory object was not resolved, so...
    # first look for a type declaration as dot-object
    # then look for a type declaration as object in the current dir's class

    warn state: path=$path prefix=$prefix

    test -L $path/.$prefix && test ! -e $path/.$prefix && {
        set=($(readlink $path/.$prefix))
        warn ${set[*]} type:$set
        test -e $set
        }

    




    # look for matching attribute declaration in the parent object's lineage
    # the declaration must be a non-resolving symlink identifying a class
    # 'path' variable identifies directory containing object 'prefix' 
    unset shadow_type
    if test $path = ./ -a -n "$TOB_search_paths"; then
        resolve_shadow_type $prefix
    elif test -L $path/^; then
        resolve_shadow_type $prefix $path/^
    elif test -L $path/.^; then
        resolve_shadow_type $prefix $path/.^
    fi
        
    # try to resolve $path.$prefix as a regular or special file object...
    test -e $path/$prefix && {              # regular or special file
        get_type $path/$prefix
        return
        }
    test -n "$NO_HIDDEN" && return 5        # anything left must be hidden...
    test -e $path/.$prefix && {             # hidden regular or special file
        get_type $path/.$prefix
        return
        }
    test -L $path/$prefix && {              # hidden ob behind symlink?
        target=$(readlink -f $path/$prefix)
        leaf=${target##*/}
        target=${target%/*}
        test -e $target/.$leaf && {
            get_type $target/.$leaf
            return
            }
        }
    test -L $path/.$prefix && {             # hidden ob behind dot-symlink?
        target=$(readlink -f $path/.$prefix)
        leaf=${target##*/}
        target=${target%/*}
        test -e $target/.$leaf && {
            get_type $target/.$leaf
            return
            }
        }
    return 6                                # no object was resolved
    }

resolve_type () { # resolve (proto)type(s) into types[], apaths[], mpaths[]
    local type=$1 && shift
    local path
    while test -n "$type"; do
        if test -d "$type"; then
            # ... a 'prototype' only provides attributes, not methods
            path=$type
            apaths+=($path)
        else
            unset path
            for lib in $TOBLIB; do
                test -d $lib/$type/ || continue
                path=$lib/$type
                break
            done
            test -n "$path" || return 1
            types+=($type)
            apaths+=($path)
            mpaths+=($path)
        fi
        unset type

        for mixin in $path/{,.}^?*; do # ... e.g., ^Cron or .^settings, etc.
            test -z "$TOB_NO_MIXINS" || break
            test -L $mixin || continue # ... skip if not a symlink

            if test -d $mixin; then # ... prototype object
                mixin=$(readlink $mixin)
                if test ${mixin:0:1} = /; then # ... absolute path
                    resolve_type $mixin
                else
                    resolve_type $path/$mixin
                fi
            else # does not resolve, so assume it's a type
                resolve_type $(readlink $mixin)
            fi
        done

        test -n "$1" && type=$1 && shift && continue # ... use arg for type
        test -L $path/^ && type=$(readlink $path/^)
        test -L $path/.^ && type=$(readlink $path/.^)
    done
    }

cull_duplicate_paths () {
    local entry
    local unique
    declare -i i
    # arrays types and mpaths are 1:1, so scan types, discard from both
    for (( i=${#types[@]}; i>=0; i-- )); do
        entry=${types[$i]}
        test "${unique/$entry/}" = "$unique" || {
            # this entry already scanned
            unset types[$i]
            unset mpaths[$i]
            continue
            }
        unique+=" $entry"
    done
    unset unique
    # apaths array can include duplicates, so scan & discard, leaving last
    for (( i=${#apaths[@]}; i>=0; i-- )); do
        entry=${apaths[$i]}
        test "${unique/$entry/}" = "$unique" || {
            # this entry already scanned
            unset apaths[$i]
            continue
            }
        unique+=" $entry"
    done
    }

resolve_method_path () {
    local method=$1
    # uses global super, i.e., count of how many times to skip matched method
    for path in ${mpaths[@]}; do
        test -x $path/$method && {
            test $super -gt 0 && super+=-1 && continue
            TOB_method_path=$path/$method
            return
            }
    done
    return 1
    }

TOB_resolve_method_path () {
    local method=$1
    local super=0
    while test "${method:0:6}" = "super."; do
        method=${method:6}
        super+=1
    done
    for path in ${TOB_method_paths//:/ }; do
        test -x $path/$method && {
            test $super -gt 0 && super+=-1 && continue
            TOB_method_path=$path/$method
            return
            }
    done
    return 1
    }

TOB_get_attr () {
    # set variable 'attr' to attribute value(s), or return false
    # if $arg matches a file, scalar attr is set to its contents
    # if file(s) matches $arg=value, array attr is set to value(s)
    local arg=$1 path file
    test -n "$arg" || return 1
    for path in ${TOB_search_paths//:/ }; do
        test -e "$path/$arg" && attr=$(<$path/$arg) && return
        file=($path/$arg=*)
        test "${file: -1}" = '*' && continue
        attr=(${file[@]#$path/$arg=}) && return
    done
    return 1
    }

main () {
    test -n "$TOBLIB" || error --exit 102 "TOBLIB is not set"
    ## process argument list options:
    unset method
    arg=$1 && shift
    while test "${arg:0:1}" = -; do # handle option...
        case $arg in
            -H | --no-hidden)   NO_HIDDEN=1;    opt="$opt -H" ;;
            -q | --quiet)       QUIET=1;        opt="$opt -q" ;;
            -v | --verbose)     VERBOSE=1;      opt="$opt -v" ;;
            -d | --debug)       DEBUG=1;        opt="$opt -d" ;;
            -h | --help)        exec awk '/^NAME$/,0' $0 ;;
            -a | --arg)         args="$args $1" && shift ;;
            -m | --method)      method=$1 && shift
                test $method || error --exit 101 "no method argument" ;;
            *) error --exit 102 "unsupported option $arg" ;;
        esac
        arg=$1 && shift # try again...
    done
    
    test -z "$arg" && error --exit 103 "no object specified"
    
    test $method && { ## dispatch method from -m or --method option on objects:
        while [ $arg ]; do
            if [ ${arg/=} != $arg ]; then # tag=value form detected
                args="$args $arg"
            else
                test $VERBOSE &&
                    echo $0 $opt $arg.$method $args
                $0 $opt $ob.$method $args ||
                    error --exit 104 "failed in $arg.$method"
            fi
            arg=$1 && shift
        done
        exit
        }
    
    test ${arg/.//} = $arg && # no dot found, so exec as ..method in 'self' object
        exec $0 ..$arg "$@"
    
    ## parse the method and object from the object.method specification:
    TOB_method=${arg##*.}
    TOB_object=${arg%.*}
    
    ## count and remove 'super' modifier(s) if at end of object:
    declare -i super=0
    while test "${TOB_object: -6}" = ".super"; do
        TOB_object=${TOB_object%.super}
        super+=1
    done

    test -n "$TOB_object" ||
        error --exit 105 "no object parsed from $arg with method $TOB_method"
    
    test -n "$TOB_method" ||
        error --exit 106 "no method parsed from $arg, object $TOB_object"
    
    ## resolve_object() may change directories, so store caller's location:
    TOB_caller_path=$PWD

    test -n "$DEBUG" && { # all of these should now be set:
        warn DEBUG: TOB_object=$TOB_object
        warn DEBUG: TOB_method=$TOB_method
        warn DEBUG: super count: $super
        warn DEBUG: TOB_caller_path=$TOB_caller_path
        warn DEBUG: "args1='$args' args2='$*'"
        }
    
    # resolve_object() should set TOB_type, TOB_path_to_object
    resolve_object $TOB_object
    return_status=$?
    case $return_status in
    1)  error --exit 111 failed to cd to $TOB_object at $TOB_path_to_object ;;
    2)  error --exit 112 $TOB_object at $TOB_path_to_object is $TOB_type ;;
    3)  error --exit 113 broken symlink: $TOB_object at $TOB_path_to_object ;;
    4)  error --exit 114 no $TOB_object type at $TOB_path_to_object ;;
    5)  error --exit 115 "hidden element or elements ($hidden) in $obspec" ;;
    6)  test -z "$TOBLIB_NOT_OBJECT" ||
            error --exit 116 failed to resolve $TOB_object
        # ok to try to resolve tob library class as object
        # first dot-delimited element must exist as a directory
        prefix=${TOB_object%%.*}
        for toblib in $TOBLIB; do
            test -d $toblib/$prefix/ || continue
            exec $0 $toblib/$TOB_object.$TOB_method 
            # to fix: the above exec call is missing args...
        done
        error --exit 117 failed to resolve $TOB_object
        ;;
    esac

    ## a couple of assertion checks, probably redundant:
    test -n "$TOB_type" ||
        error --exit 118 failed to resolve $TOB_object type
    test -n "$TOB_path_to_object" ||
        error --exit 119 failed to resolve path to $TOB_object
    
    test -n "$DEBUG" && { # all of these should now be set:
        warn DEBUG: TOB_type=$TOB_type
        warn DEBUG: TOB_path_to_object=$TOB_path_to_object
        warn DEBUG: calling: resolve_type . $TOB_type
        }
    
    # resolve_paths() builds arrays: types and paths, recursing on mixins
    # - first of 2 args is the object, not class, may include mixins
    # - types array is 1:1 with path after skipping paths[0]
    declare -a types mpaths apaths
    resolve_type . $TOB_type

    test -n "$DEBUG" && { # all of these should now be set:
        warn DEBUG: top types="<$types>",    ${#types[*]} entries
        warn DEBUG: top mpaths="<$mpaths>", ${#mpaths[*]} entries
        warn DEBUG: top apaths="<$apaths>", ${#apaths[*]} entries
        }
    
    test "$types" || {
        test "${#apaths[@]}" -gt 1 &&
            error --exit 120 prototype but no type resolved for $TOB_object
        error --exit 121 no type or prototype resolved for $TOB_object
        }

    # arrays may have duplicate entries, so leave only the last such entry
    cull_duplicate_paths
    
    ## export thinobject variables
    export TOB_object
    export TOB_method
    export TOB_type
    export TOB_class_path
    export TOB_caller_path
    export TOB_caller_path_to_object=$TOB_path_to_object
    
    ## export thinobject utility functions
    export -f TOB_resolve_method_path
    export -f TOB_get_attr
    
    # create pseudo-arrays for export, with colon as delimiter:
    save_IFS="$IFS"
    IFS=:
    export TOB_search_paths="${apaths[*]}"
    export TOB_method_paths="${mpaths[*]}"
    export TOB_type="${types[*]}"
    IFS="$save_IFS"
    
    test -n "$DEBUG" && {
        warn DEBUG: TOB_search_paths=$TOB_search_paths
        warn DEBUG: TOB_method_paths=$TOB_method_paths
        warn DEBUG: TOB_type=$TOB_type
        }
    
    resolve_method_path $TOB_method &&
        exec $TOB_method_path $args "$@"
    
    ## no executable method was resolved, so try some built-ins:
    
    test $TOB_method = path && {
        test -z "$*" && echo $TOB_path_to_object/
        for arg in $*; do
            test -e $arg ||
                error --exit 121 $arg not found
            echo $TOB_path_to_object/$arg
        done
        exit
        }
    
    test "$TOB_method" = "type" &&
        echo $TOB_type &&
            exit
    
    ## no method was found, so check for _default method...
    
    for path in ${mpaths[@]}; do
        ## ASSERT: class exists
        test -e $path/_default && {
            test -x $path/_default && {
              # warn DEBUG tob: exec $path/_default $TOB_object $TOB_method $*
                exec $path/_default $TOB_method "$@"
                }
            ## ASSERT: _default exists but is not executable
            ## maybe it can contain a recipe to be executed?
            error --exit 122 'non-executable _default "method" found'
            }
    done
    
    error --exit 123 "no method $TOB_method found"
    } # end main()

main "$@"

exit
NAME
    tob -- parse and resolve object.method, invoke method in object directory

SYNOPSIS
    tob [OPTIONS] object.method [METHOD_OPTIONS] [ARGUMENTS]
    tob -m method [-a arg]... object...

DESCRIPTION
    Thinobject strives to achieve object oriented programming and data
    management directly on the filesystem, in a language-independent way.
    Methods are executable programs, written in any language.  Thinobject
    uses a symlink, .^ or ^, to a class directory (or handler).  Methods
    and attributes are searched for along the chain of class links.

EXIT VALUE
    Exit value should be 0 if no error occurred, but should have a value
    from 101 to 123 if there was an error.  The numbers are assigned
    sequentially in the tob script, and for now that's the only documentation
    for what specific values mean.

OPTIONS
    -d
    --debug
    turn on debug output

    -v
    --verbose
    turn on verbose output

    -m M
    --method M
    apply method M to the following list of objects    

    -a ARGS...
    --arg ARGS...
    provide arguments; useful in conjunction with the --method option

    -h
    --help
    show this help screen (manpage)

    -q
    --quiet
    suppress output to stderr on errors
    
OBJECT CREATION
    Use tob-new to create objects.

BUILT-IN METHODS
    path
        output the object directory path

    type
        output the class hierarchy

PROPERTIES
    The thinobject system uses ordinary files and directories in the
    filesystem, so the content of an object is arbitrary.  It may be
    convenient/helpful to think of the contents of an object as its
    ``properties'', if only to distinguish them from otherwise ordinary
    files (which they really are).

    Special meaning is applied to certain files, as follows:

    ^
    .^
    symlink to the parent class

    ^foo
    .^foo
    symlink to a mixin class


SEARCH PATHS
    tob prepares a search path for methods and one for attributes.
    These differ mainly in that methods are not resolved in the object,
    while attributes may be.

    Mixin classes are searched before the parent class, in lexical 
    order.  Common ancestor classes are searched last. 

EXPORTED VARIABLES
    TOB_object -- the object name as passed to the thinob enabler

    TOB_method -- the invoked method

    TOB_type -- the nominal class name

    TOB_class_path -- the class directory or handler path

    TOB_object_path -- the fully resolved object name

    TOB_search_paths -- search paths for object attributes

    TOB_method_paths -- search paths for object methods

    TOB_caller_path

    TOB_caller_path_to_object

    TOB_path_to_object

EXPORTED FUNCTIONS
    TOB_resolve_method_path
    TOB_get_attr

   output format is: $TOB_object.$TOB_method: ARGUMENTS...

SEE ALSO
    tob-new --help
    tob-del --help
    Ideally, each thinobject class will provide a help method, and a
    --help option to each of its methods.

BUGS
    This is an experimental system.

    Not sure the --quiet option is working quite right...

    Should document all exit values.

AUTHOR
    Ken.Irving@alaska.edu (c) 2007-2010

