main () {
  # errmsg+=("$FUNCNAME($*)")
    while test ${1:0:1} = -; do
        case $1 in 
            -d)     DEBUG=1;;
            *)  error -x 1 "unknown option $1";;
        esac && shift
    done
    test -n "$TOBLIB" || error -x 1 "TOBLIB is not set"
    test -n "$DEBUG" || alias debug=\#
    declare path= object= method= 
    declare -a types=() mpaths=() apaths=() envars=()

    declare -x TOB_caller_path=$PWD

    declare query="$1" && shift
    declare -a q=()
    declare -i o m  # index o points to object, m points to method
    parse_query "$query" || error -x $? parse... 

    resolve_query ||
        case $? in
            9)  # try again using method 'default'
                q+=(default) && m+=1
                resolve_query || error -x $?
                ;;
            *)  error -x $?;;
        esac

  # warn "PATH=$path" "OBJECT=$object" "TYPE=$type" "METHOD=$method"

    types=() mpaths=() apaths=() envars=()

    save=(${type[@]})
    test -n "$anonymous" && {
        type=(.)
        resolve_search_paths one-pass
        type=(${save[@]})
        }
    resolve_search_paths
    type=(${save[@]})

    test -n "$types" || {
        test "${#apaths[@]}" -gt 1 &&
            error -x 120 "prototype but no type resolved for $object"
        error -x 121 "no type or prototype resolved for $object"
        }

    export TOB_query=$query
    export TOB_object=$object
    export TOB_method=$method
    export TOB_type=$type
    export TOB_class_path
    export TOB_caller_path
    export TOB_caller_path_to_object=$TOB_path_to_object
    test -n "$class_object" && export TOB_class_object=$class_object

    tags=':'
  # warn "envars has ${#envars[@]} entries:" "${envars[@]}"
    for envar in ${envars[*]}; do
        test -n "$envar" || continue
        tag=${envar%%=*}
        # skip entry if not in tag=value form:
        test $tag = "$envar" && continue
        # skip entry if tag has already been set:
        test $tags = ${tags/:$tag://} || continue
        val=${envar#*=}
        export $tag=$val
        tags+=$tag:
    done
    
    # create pseudo-arrays for export, with colon as delimiter:
    save_IFS="$IFS" && IFS=:
    export TOB_search_paths="${apaths[*]}"
    export TOB_method_paths="${mpaths[*]}"
    export TOB_types="${types[*]}"
    export TOB_envars="${envars[*]}"
    IFS="$save_IFS"
    
    test -n "$DEBUG" &&
        warn "PATH=$path" "OBJECT=$object" "TYPE=$type" "METHOD=$method" \
            TYPES=$TOB_types
    
    resolve_method_path $TOB_method &&
        exec $TOB_method_path "${args[@]}" "$@"
    
    ## no executable method was resolved, so try some built-ins:

    ## show exported variables as methods
    case $method in
        type)           echo $type && exit;;
        query)          echo $query && exit;;
        object)         echo $object && exit;;
        envars)         printf "%s\n" "${envars[@]}" && exit;;
        types)          printf "%s\n" "${types[@]}" && exit;;
        search-paths)   printf "%s\n" "${apaths[@]}" && exit;;
        method-paths)   printf "%s\n" "${mpaths[@]}" && exit;;
    esac

    ## no method was found, so check for _default method...
    
    for path in ${mpaths[@]}; do
        ## ASSERT: class exists
        test -e $path/_default && {
            test -x $path/_default && {
                debug "tob: exec $path/_default $TOB_object $TOB_method $*"
                exec $path/_default $TOB_method "$@"
                }
            ## ASSERT: _default exists but is not executable
            ## maybe it can contain a recipe to be executed?
            error -x 122 "non-executable _default method found"
            }
    done
    
    error -x 123 "no method $TOB_method found"
    } # end main()
