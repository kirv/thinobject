resolve_object () { 
    #               resolve directory or attribute object or return code 6
    #               return values 0 to 4 are from get_type()
    #               get_type() sets TOB_type, TOB_path_to_object
    local obspec=$1
  # warn OBSPEC:$obspec
    local path=. # assume path is relative
    test ${obspec:0:1} = / && path="" # no, path is absolute
    unset prefix
    for elem in ${obspec//./ }; do          # split into elements on dots
      # warn "   ELEM:$elem"
        test -n "$prefix" && elem=$prefix.$elem && unset prefix
        if test ${elem: -1:1} = /; then     # element is explicitly a directory
            path+=/${elem%/}
          # warn "      1 $path"
        elif test -d $path/$elem; then      # dot-terminated directory
            path+=/$elem
          # warn "      2 $path"
        elif test -d $path/${elem%/*}/.${elem##*/}; then # hidden directory
            path="$path/${elem%/*}/.${elem##*/}"
          # warn "      3 $path"
        elif test -d $path/.$elem; then # hidden directory
            path="$path/.$elem"
          # warn "      4 $path"
        elif test -L $path/$elem; then      # hidden dir behind symlink?
          # warn "      5 $path"
            target="$(readlink -f $path/$elem)"
            leaf="${target##*/}"
            target="${target%/*}"
            if test -d "$target/.$leaf"; then
                path="$target/.$leaf"
            else
                prefix=$elem
            fi
        elif test -L $path/.$elem -a ! -e $path/.$elem; then # declaration?
          # warn "      6 $path"
            # could be .foo -> Attr/Boolean
            # or .foo -> bar, and -d .bar/
            # or .foo -> =123
            # but in all these cases .foo exists as a broken symlink
            prefix=.$elem
        elif test -L $path/.$elem; then     # hidden dir behind hidden symlink?
          # warn "      7 $path"
            target=$(readlink -f $path/.$elem)
            leaf=${target##*/}
            target=${target%/*}
            if test -d $target/.$leaf; then
                path=$target/.$leaf
            else
                prefix=$elem
            fi
        else
            prefix=$elem
        fi
    done
  # warn "    PATH:$path PREFIX:$prefix PWD:$PWD"
    test -z "$prefix" && {  # a directory object was resolved
      # warn "CALLING: get_type $path"
        get_type $path
        return
        }
    test -n "$path" || {
      # warn "START PREFIX:<$prefix>"
        path=${prefix%/*}
        prefix=${prefix##/*/}
        }
  # warn "PATH:<$path> PREFIX:<$prefix>"
    resolve_attr_declaration $path $prefix && return
    return 6                                # no object was resolved
    }
