resolve_object () { 
    #               return values 0 to 4 are from get_type()
    #               get_type() sets TOB_type, TOB_path_to_object
    #               return 6 if unable to resolve anything
    #
    local obspec=$1
    local path=. # assume path is relative
    test ${obspec:0:1} = / && path="" # no, path is absolute
    unset prefix
    for elem in ${obspec//./ }; do          # split into elements on dots
        test -n "$prefix" && elem=$prefix.$elem && unset prefix
        if test ${elem: -1:1} = /; then     # element is explicitly a directory
            path+=/${elem%/}
        elif test -d $path/$elem; then      # dot-terminated directory
            path+=/$elem
        elif test -d $path/${elem%/*}/.${elem##*/}; then # hidden directory
            path="$path/${elem%/*}/.${elem##*/}"
        elif test -d $path/.$elem; then # hidden directory
            path="$path/.$elem"
        elif test -L $path/$elem; then      # hidden dir behind symlink?
            target="$(readlink -f $path/$elem)"
            leaf="${target##*/}"
            target="${target%/*}"
            if test -d "$target/.$leaf"; then
                path="$target/.$leaf"
            else
                prefix=$elem
            fi
        elif test -L $path/.$elem; then     # hidden dir behind hidden symlink?
            target=$(readlink -f $path/.$elem)
            leaf=${target##*/}
            target=${target%/*}
            if test -d $target/.$leaf; then
                path=$target/.$leaf
            else
                prefix=$elem
            fi
        else
            prefix=$elem
        fi
    done
    test -z "$prefix" && {  # a directory object was resolved
        get_type $path
        return
        }

    # look for attribute declaration shadowing object:
    resolve_attr_shadow_declaration $path $prefix || 
        resolve_attr_class_declaration $path $prefix ||
            return 

    resolve_attr_shadow_declaration $path $prefix

    # look for attribute declaration in class definition
    resolve_attr_class_declaration $path $prefix

    # look for matching attribute declaration in the parent object's lineage
    # the declaration must be a non-resolving symlink identifying a class
    # 'path' variable identifies directory containing object 'prefix' 
    unset shadow_type
    if test $path = ./ -a -n "$TOB_search_paths"; then
        resolve_shadow_type $prefix
    elif test -L $path/^; then
        resolve_shadow_type $prefix $path/^
    elif test -L $path/.^; then
        resolve_shadow_type $prefix $path/.^
    fi
        

    # try to resolve $path.$prefix as a regular or special file object...
    test -e $path/$prefix && {              # regular or special file
        get_type $path/$prefix
        return
        }
    test -e $path/.$prefix && {             # hidden regular or special file
        get_type $path/.$prefix
        return
        }
    test -L $path/$prefix && {              # hidden ob behind symlink?
        target=$(readlink -f $path/$prefix)
        leaf=${target##*/}
        target=${target%/*}
        test -e $target/.$leaf && {
            get_type $target/.$leaf
            return
            }
        }
    test -L $path/.$prefix && {             # hidden ob behind dot-symlink?
        target=$(readlink -f $path/.$prefix)
        leaf=${target##*/}
        target=${target%/*}
        test -e $target/.$leaf && {
            get_type $target/.$leaf
            return
            }
        }
    return 6                                # no object was resolved
    }
