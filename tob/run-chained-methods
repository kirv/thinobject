run_chained_methods () {
    declare -i i=0
    local infifo= fifo
    # chain[] contains method names, methods[] their paths
    while test $i < ${#chain[@]}; do
        if test ! -n "$infifo"; then
            case ${directive[i]} in
                WAIT)   "${methods[i]}" ;;
                FORK)   "${methods[i]}" & ;;
                AND)    "${methods[i]}" || exit ;;
                OR)     "${methods[i]}" && exit ;;
                PIPE)
                    fifo=/tmp/$$-$chain
                    while test -e $fifo; do fifo.=-$i; done
                    trap "rm -f $fifo" EXIT
                    mkfifo $fifo || error -x $? mkfifo $fifo failed
                    "${methods[i]}" > $fifo &
                    infifo=$fifo
                    ;;
                *)      error -x 1 "unknown directive: ${directive[i]}" ;;
            esac
        else
            case ${directive[i]} in
                WAIT)   "${methods[i]}" < $infifo ;;
                FORK)   "${methods[i]}" < $infifo & ;;
                AND)    "${methods[i]}" < $infifo || exit ;;
                OR)     "${methods[i]}" < $infifo && exit ;;
                PIPE)
                    fifo=/tmp/$$-$chain
                    while test -e $fifo; do fifo.=-$i; done
                    trap "rm -f $fifo" EXIT
                    mkfifo $fifo || error -x $? mkfifo $fifo failed
                    "${methods[i]}" < $infifo > $fifo &
                    infifo=$fifo
                    ;;
                *)      error -x 1 "unknown directive: ${directive[i]}" ;;
            esac
        fi
    done
    chainpid=$!
    wait $chainpid
    }
