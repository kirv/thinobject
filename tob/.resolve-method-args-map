#!/bin/bash

source resolve-method-args-map || error "$0 FAILED at line $LINENO"
source scan-args-map  || error "$0 FAILED at line $LINENO"

# resolve_method_args_map() looks for an args-map declaration in a 
# non-resolving symlink with the given name, then calls scan_method_args_map()


# create a temporary object directory, add it to the 'attribute paths'
trap "rm -r tmp$$" 0 1
mkdir -p tmp$$
apaths=(tmp$$)

set_symbol() { ln -sf "$2" "$1"; }

# first try setting args_map to a literal value:
set_symbol tmp$$/m "Method test1"
resolve_method_args_map m
assert-equal $? 0
assert-equal "${args_map[*]}" test1

# now try with several literal values:
set_symbol tmp$$/m "Method A B C -x --y=foo --z bar"
resolve_method_args_map m
assert-equal $? 0
assert-equal "${args_map[0]}" A
assert-equal "${args_map[4]}" --y=foo
assert-equal "${args_map[${#args_map[@]}-1]}" bar

# now try it with some symvar attributes, so source the symvar functions
source set-symvar || error "FAILED to source set-symvar"
source get-symvar || error "FAILED to source tet-symvar"

# create a symvar, expect to see it expanded in the args_map list
set-symvar tmp$$/foo test
set_symbol tmp$$/m "Method A B @foo"
resolve_method_args_map m
assert-equal $? 0
assert-equal "${args_map[2]}" 'test'

# change the symvar value to include spaces:
set-symvar tmp$$/foo "testing one, two, three"
set_symbol tmp$$/m "Method A B @foo"
resolve_method_args_map m
assert-equal $? 0
assert-equal "${args_map[2]}" 'testing one, two, three'

# an attribute that does not resolve should cause the operation to fail:
set_symbol tmp$$/m "Method A B @foo @bar" 
resolve_method_args_map m
assert-equal $? 2

# an option value should also get expanded:
set_symbol tmp$$/m "Method A B --test=@foo last
resolve_method_args_map m
assert-equal $? 0
assert-equal "${args_map[2]}" '--test=testing one, two, three'
assert-equal "${args_map[3]}" last

# an option @attr where attr does not exist should get culled:
set-symvar tmp$$/foo FOO
set_symbol tmp$$/m "Method A B --test=@foo --bar=@bar last
resolve_method_args_map m
assert-equal $? 0
printf "\t%s\n" "${args_map[@]}"
assert-equal "${args_map[2]}" '--test=FOO'
assert-equal "${args_map[*]}" "A B --test=FOO last"

# for now at least we do not support attribute expansion in the option name:
set_symbol tmp$$/m "Method --@foo"
resolve_method_args_map m
assert-equal $? 0
# note that this doesn't give an error, but just passes the literal value along
assert-equal "${args_map[0]}" '--@foo'

# an option with a bare '@' implies an attribute of the same name as the option:
set_symbol tmp$$/m "Method A B @foo"
args_map=(--foo=@ --foo=@foo)
resolve_method_args_map m
assert-equal $? 0
assert-equal "${args_map[1]}" --foo=FOO
assert-equal "${args_map[0]}" "${args_map[1]}"

# try option with one dash and bare '@'
set_symbol tmp$$/m "Method A B @foo"
args_map=(-foo=@ -foo=@foo)
resolve_method_args_map m
assert-equal $? 0
assert-equal "${args_map[1]}" -foo=FOO
assert-equal "${args_map[0]}" "${args_map[1]}"

echo DONE $0

