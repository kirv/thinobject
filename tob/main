main () {
    while [[ ${1:0:1} == - ]]; do
        case $1 in 
        -s)     export "$2" && shift;;
        -h)     echo synopsis: $synopsis; exit;;
        --help) awk '/^NAME$/{ok=1}ok' $0; exit;;
        *)      error -x 1 "unknown option $1";;
        esac && shift
    done
    init-libraries || exit 37
    local path= object= method= 
    local -a types=() mpaths=() apaths=() envars=()

    local -x TOB_caller_path=$PWD

    local query="$1" && shift
    local -a q=()
    local -i o m  # index o points to object, m points to method
    parse_query "$query" || error -x $? parse... 

    resolve_query ||
        case $? in
            9)  # try again using method 'default'
                warn 'trying again'
                q+=(default) && m+=1
                resolve_query || error -x $?
                ;;
            *)  error -x $?;;
        esac

    types=() mpaths=() apaths=() envars=()

    save=(${type[@]})
    [[ -n $anonymous ]] && {
        type=(.)
        resolve_search_paths one-pass
        type=(${save[@]})
    }
    resolve_search_paths
    cull_duplicate_paths
    type=(${save[@]})

    [[ -n $types ]] || {
        (( ${#apaths[@]} > 1 )) &&
            error -x 120 "prototype but no type resolved for $object"
        error -x 121 "no type or prototype resolved for $object"
    }

    export TOB_query=$query
    export TOB_object=$object
    export TOB_method=$method
    export TOB_type=$type
    export TOB_type_path
    export TOB_caller_path
    export TOB_caller_path_to_object=$TOB_path_to_object
    [[ -n $type_object ]] && export TOB_type_object=$type_object

    for envarset in "${envars[@]}"; do
        tag= val=
        for word in $envarset; do
            [[ ${word%%=*} == "$word" ]] && val+=" $word" && continue
            # word is a tag, so export pending tag if it exists:
            [[ -n $tag && ! -n ${!tag} ]] && {
                export $tag="$val" ||
                    error -x $? "bad assignment: $tag=$val"
            }
            # now parse new tag and val:
            tag=${word%%=*}
            val=${word#*=}
        done
        [[ -n $tag ]] || continue
        [[ -n ${!tag} ]] && continue
        export $tag="$val" ||
            error -x $? "bad assignment: $tag=$val"
    done

    # create pseudo-arrays for export, with colon as delimiter:
    save_IFS="$IFS" && IFS=:
    export TOB_search_paths="${apaths[*]}"
    export TOB_method_paths="${mpaths[*]}"
    export TOB_types="${types[*]}"
    export TOB_envars="${envars[*]}"
    IFS="$save_IFS"
    
    resolve_method $TOB_method && {
        resolve_method_declaration $TOB_method && {
            resolve_wrapper_method $(readlink $method_declaration) ||
                error "failed to resolve wrapper method at $method_declaration"
            exec $wrapper $TOB_method_path "$@" "${wrapper_args[@]}"
        }
        exec $TOB_method_path "$@"
    }
}
