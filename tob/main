main () {
    while [[ ${1:0:1} == - ]]; do
        case $1 in 
        -h)     echo synopsis: $synopsis; exit;;
        --help) awk '/^NAME$/{ok=1}ok' $0; exit;;
        *)      error -x 1 "unknown option $1";;
        esac && shift
    done
    init-libraries || exit 37
    local path= object= method= 
    local -a types=() mpaths=() apaths=()

    local TOB_caller_path=$PWD

    local query="$1" && shift
    local -a q=()
    local -i o m  # index o points to object, m points to method
    warn "DEBUG-0-a"
    parse_query "$query" || error -x $? parse... 

    warn "DEBUG-0-b"
    resolve_query || error -x $?

    types=() mpaths=() apaths=()

    warn "DEBUG-0-c"
    save=(${type[@]})
    [[ -n $anonymous ]] && {
        type=(.)
        resolve_search_paths one-pass
        type=(${save[@]})
    }
    resolve_search_paths
    warn "DEBUG-0-d"
    cull_duplicate_paths
    warn "DEBUG-0-e"
    type=(${save[@]})

    [[ -n $types ]] || {
        (( ${#apaths[@]} > 1 )) &&
            error -x 120 "prototype but no type resolved for $object"
        error -x 121 "no type or prototype resolved for $object"
    }

    export TOB_query=$query
    export TOB_object=$object
    export TOB_method=$method
    export TOB_type=$type
    export TOB_caller_path

    ## create pseudo-arrays for export, with colon as delimiter:
    save_IFS="$IFS"
    IFS=:
    export TOB_search_paths="${apaths[*]}"
    export TOB_method_paths="${mpaths[*]}"
    export TOB_types="${types[*]}"
    IFS="$save_IFS"

    warn "DEBUG-1: look for executable method $method"
    ## look for executable method:
    resolve_method $method && {
        exec $TOB_method_path "$@"
    }

    warn "DEBUG-2: look for symvar $method"
    ## look for symvar $method
    for path in "${apaths[@]}"; do
        [[ -L $path/$method && ! -e $path/$method ]] && {
            value=$(readlink $path/$method)
            [[ ${value:0:1} = = ]] && printf "%s\n" "${value:1}" && return
        }
    done

    warn "DEBUG-3: look for list attribute @$method"
    ## look for list attribute @$method:
    for path in "${apaths[@]}"; do
        [[ -e $path/@$method ]] && {
            printf "%s\n" "$(<$path/@$method)" && return
        }
    done
    
    warn "DEBUG-4: look for dictionary attribute %$method"
    ## look for dictionary attribute %$method:
    for path in "${apaths[@]}"; do
        [[ -e $path/%$method ]] && {
            printf "%s\n" "$(<$path/%$method)" && return
        }
    done
    
    warn "DEBUG-5: look for regular file $method"
    ## look for regular file $method:
    for path in "${apaths[@]}"; do
        [[ -e $path/$method ]] && {
            printf "%s\n" "$(<$path/$method)" && return
        }
    done
    
    warn "DEBUG-6 no method $method found"
    error -x 123 "no method $method found"
}
