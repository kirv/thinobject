main () {
  # errmsg+=("$FUNCNAME($*)")
    while [[ "${1:0:1}" == - ]]; do
        case $1 in 
        -s)     export "$2" && shift;;
        -d)     DEBUG=1;;
        -h)     echo synopsis: $synopsis; exit;;
        --help) awk '/^NAME$/{ok=1}ok' $0; exit;;
        *)      error -x 1 "unknown option $1";;
        esac && shift
    done
    init-libraries || exit 37
    [[ -n "$DEBUG" ]] || alias debug=\#
    local path= object= method= 
    local -a types=() mpaths=() apaths=() envars=()

    local -x TOB_caller_path=$PWD

    local query="$1" && shift
    local -a q=()
    local -i o m  # index o points to object, m points to method
    parse_query "$query" || error -x $? parse... 

    resolve_query ||
        case $? in
            9)  # try again using method 'default'
                warn 'trying again'
                q+=(default) && m+=1
                resolve_query || error -x $?
                ;;
            *)  error -x $?;;
        esac

  # warn "PATH=$path" "OBJECT=$object" "TYPE=$type" "METHOD=$method" "ANONYMOUS=$anonymous" "PWD=$PWD"

  # errmsg+=("<<< AFTER resolve_query():"
  #     "PATH=$path" "OBJECT=$object" "TYPE=$type" "METHOD=$method"
  #     "ANONYMOUS=$anonymous" "PWD=$PWD" o=$o m=$m ">>>" )

    types=() mpaths=() apaths=() envars=()

    save=(${type[@]})
    [[ -n "$anonymous" ]] && {
        type=(.)
        resolve_search_paths one-pass
        type=(${save[@]})
    }
    resolve_search_paths
    cull_duplicate_paths
    type=(${save[@]})

    [[ -n "$types" ]] || {
        [[ "${#apaths[@]}" -gt 1 ]] &&
            error -x 120 "prototype but no type resolved for $object"
        error -x 121 "no type or prototype resolved for $object"
    }

    export TOB_query=$query
    export TOB_object=$object
    export TOB_method=$method
    export TOB_type=$type
    export TOB_class_path
    export TOB_caller_path
    export TOB_caller_path_to_object=$TOB_path_to_object
    [[ -n "$class_object" ]] && export TOB_class_object=$class_object

    for envarset in "${envars[@]}"; do
        tag= val=
        for word in $envarset; do
            [[ ${word%%=*} == $word ]] && val+=" $word" && continue
            # word is a tag, so export pending tag if it exists:
            [[ -n "$tag" && ! -n "${!tag}" ]] && {
                export $tag="$val" ||
                    error -x $? "bad assignment: $tag=$val"
            }
            # now parse new tag and val:
            tag=${word%%=*}
            val=${word#*=}
        done
        [[ -n "$tag" ]] || continue
        [[ -n "${!tag}" ]] && continue
        export $tag="$val" ||
            error -x $? "bad assignment: $tag=$val"
    done

    # create pseudo-arrays for export, with colon as delimiter:
    save_IFS="$IFS" && IFS=:
    export TOB_search_paths="${apaths[*]}"
    export TOB_method_paths="${mpaths[*]}"
    export TOB_types="${types[*]}"
    export TOB_envars="${envars[*]}"
    IFS="$save_IFS"
    
    [[ -n "$DEBUG" ]] &&
        warn "PATH=$path" "OBJECT=$object" "TYPE=$type" "METHOD=$method" \
            TYPES=$TOB_types
    
  # warn "RESOLVE_METHOD $TOB_method"
    resolve_method $TOB_method && {
        resolve_method_declaration $TOB_method && {
            resolve_wrapper_method $(readlink $method_declaration) ||
                error "failed to resolve wrapper method at $method_declaration"
            exec $wrapper $TOB_method_path "$@" "${wrapper_args[@]}"
        }
        exec $TOB_method_path "$@"
    }
    
  # resolve_method $TOB_method && {
  #     resolve_method_declaration $TOB_method ||
  #         exec $TOB_method_path "$@"
  #     exec $wrapper $TOB_method_path "$@" ${wrapper_args[@]}"
  # }
    
  # warn "CONTINUING with method $TOB_method"

    ## is method a built-in?
    ## show exported variables as methods
    case $method in
        type)           echo $type && exit;;
        query)          echo $query && exit;;
        object)         echo $object && exit;;
        envars)         printf "%s\n" "${envars[@]}" && exit;;
        types)          printf "%s\n" "$TOB_types" && exit;;
        search-paths)   printf "%s\n" "${apaths[@]}" && exit;;
        method-paths)   printf "%s\n" "${mpaths[@]}" && exit;;
    esac

    ## check for _default method:
    for path in ${mpaths[@]}; do
        ## ASSERT: class exists
        [[ -e $path/_default ]] && {
            [[ -x $path/_default ]] && {
                debug "tob: exec $path/_default $TOB_object $TOB_method $*"
                exec $path/_default $TOB_method "$@"
            }
            ## ASSERT: _default exists but is not executable
            ## maybe it can contain a recipe to be executed?
            error -x 122 "non-executable _default method found"
        }
    done
    
    error -x 123 "no method $TOB_method found"
} # end main()
