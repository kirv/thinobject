#!/usr/bin/env bash
# tob -- thinobject 'enabler' program
# Copyright (C) 2013 Ken Irving
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
warn () {
    # synopsis: warn "OUTPUT-ONE-LINE-PER-ARGUMENT"
    [[ -n $QUIET ]] && return
    printf "%s\n" "$@" >&2
}
error () {
    # synopsis: error [-x N] OUTPUT_LINE ...
    [[ $1 == -x ]] && x=$2 && shift 2 || x=1
    warn "$@"
    exit $x
}
init-libraries () {
    # set toblib array with possible library locations from TOBLIB or default
    # set or reset colon-delimited TOBLIB from toblib array
    local IFS=:
    for lib in $TOBLIB {~,/opt,/usr/local,/usr,}/lib/tob; do 
        [[ -d $lib ]] && toblib+=("$lib")
    done
    [[ -d $toblib ]] || return
    # rewrite TOBLIB to only include good library paths:
    TOBLIB="${toblib[*]}"
    export TOBLIB
}
parse_query () {
    # synopsis: parse_query QUERY -> set q[], o and m indices
    [[ -n $1 ]] ||
        error -x 13 "no object or method specified"
    q[0]=$1
    [[ ${q/./} == $q ]] && q=..$q   # assume self object
    q[1]="${q//\///.}"              # change all / to /. for splitting
    q+=(${q[1]//./ })               # split on dot into array
    o=2                             # o points to start of parsed query
    m=$((${#q[*]}-1))               # m points to method
    [[ ${q:0:1} == / ]] || path=.
}
resolve_query () { # use q[], set path, set o beyond path
    unset 'anonymous'
    resolve_path || return $?
    [[ $o == $m ]] && resolve_object
}
resolve_path () { # try to resolve path in query, starting at index o
    local -i p=0

    while (( o+p < m )); do
        dir="${q[*]:o:p+1}"
        dir=${dir// /.}                 # change "a b" to "a.b"
        [[ -d $path/$dir ]] && {
            path+=/$dir 
            o+=$((p+1))
            p=0 
            continue
            }

        [[ ${dir: -1:1} == / ]] &&  # trailing / means: directory or fail
            error -x 15 "$FUNCNAME(): directory $path/$dir not found"

        [[ -d $path/.$dir ]] && {
            path+=/.$dir 
            o+=$((p+1))
            p=0 
            continue
            }
        p+=1

    done

    method="${q[*]:m}"
    object="${q[*]:o}"
    object=${object// /.}
    method="${q[*]:m}"
}
resolve_object () { # try to resolve object type at path
    type=Directory
    [[ -L $path/^ ]] && type=($(readlink $path/^))
    cd $path || error -x 2 "failed: cd $path/"
    anonymous=1
    object=$path
    method="${q[*]:m}"
    method=${method// /.}
}
resolve-library-type () {
    for lib in "${toblib[@]}"; do
        [[ -d $lib ]] && [[ -d $lib/$1 ]] && path="$lib/$1" && return
    done 
    return 1
}
resolve_search_paths () { # from (proto)type(s) to types[], apaths[], mpaths[]
    local path= target=
    shopt -s nullglob
    while [[ -n $type ]]; do
        [[ -L $type ]] && {
            target=($(readlink $type))
            # may need to preserve path to dir type in target:
            [[ -d $type && ! -d $target ]] && target=${type%/*}/$target
            type=(${target[@]})
            [[ -n $type ]] || return
            }
        if [[ -d $type ]]; then # prototype provides attributes, not methods
            path=$type
            apaths+=($path)
        else
            resolve-library-type $type || return 1
            types+=($type)
            apaths+=($path)
            mpaths+=($path)
        fi
        for mixin in $path/^?*; do # ^cron, ^settings, etc.
            [[ -L $mixin ]] || continue
            type=($mixin)
            resolve_search_paths 1
        done
        [[ -n $1 ]] && return 0
        type=($(readlink $path/^))
    done
    [[ -n $apaths ]] || return 1
    [[ -n $mpaths ]] || return 2
}
cull_duplicate_paths () {
    local -i i
    local -A unique
    [[ ${#types[@]} == ${#mpaths[@]} ]] ||
        warn "size of types, mpaths differ: ${#types[@]}, ${#mpaths[@]}"
    # arrays types and mpaths are 1:1, so scan types, discard from all
    for (( i=${#types[@]}-1; i>=0; i-- )); do
        [[ ${unique[${types[i]}]} == 1 ]] &&
            unset 'types[i]' 'mpaths[i]'
        unique[${types[i]}]=1
    done
    # scan & discard duplicates from apaths, from back to front:
    for (( i=${#apaths[@]}-1; i>=0; i-- )); do
        [[ ${unique[${apaths[i]}]} == 1 ]] && unset 'apaths[i]'
        unique[${apaths[i]}]}=1
    done
}
resolve_method () {
    # SYNOPSIS: resolve_method [--super] METHOD -> set TOB_method_path
    [[ $1 == --super ]] && super=1 && shift || unset 'super'
    local method=$1
    for path in ${mpaths[@]}; do
        [[ -x $path/$method ]] || continue
        [[ -n $super ]] && unset 'super' && continue
        TOB_method_path=$path/$method
        return
    done
    [[ ${method:0:6} = super. ]] && resolve_method --super ${method:6} && return
    return 1 
}
get-symvar () {
    # resolve symvar via 'TOB_search_paths' by name or .name
    # print value to stdout if a valid symvar, or return false
    local name path value
    if [[ $1 == ${1#*/} ]]; then
        for path in ${TOB_search_paths//:/ }; do
            for name in $path/$1; do
                [[ -L $name && ! -e $name ]] || continue
                value=$(readlink $name)
                [[ ${value:0:1} = = ]] && printf "%s" "${value:1}" && return
            done
        done
    else
        name=$1
        [[ -L $name && ! -e $name ]] || return
        value=$(readlink $name)
        [[ ${value:0:1} = = ]] && printf "%s" "${value:1}" && return
    fi
    return 1
}
set-symvar () {
    ln -sf "=$2" "$1"
}
find-symvars () {
    # resolve symvar names via 'TOB_search_paths' by wildcard/glob pattern
    # print fully qualified names to stdout
    local path name
    shopt -s nullglob
    for path in ${TOB_search_paths//:/ }; do
        for name in $path/$1; do
            [[ -L $name && ! -e $name ]] || continue
            printf "%s\n" "$name"
        done
    done
}
resolve-attribute () {
    # resolve attribute pathname via 'TOB_search_paths' and print to stdout, or fail
    local pathname
    for pathname in . ${TOB_search_paths//:/ }; do
        pathname+=/$1
        [[ -e $pathname ]] && printf "%s" "$pathname" && return
    done
    return 1
}
find-type-list-attributes () {
    # resolve matching list attributes via tob method paths and print to stdout
    local path pathname
    for path in ${TOB_method_paths/:/ }; do
        for pathname in $path/@$1; do
            [[ -x $pathname ]] && warn "$FUNCNAME: $pathname is executable"
            [[ -e $pathname ]] && printf "%s\n" "$pathname"
        done
    done
    return
}
get-list () {
    # given name, resolve @name and output list of values from it, or return false
    local name path
    name=@$1
    for path in ${TOB_search_paths//:/ }; do
        [[ -e $path/$name ]] && printf "%s\n" "$(<$path/$name)" && return
    done
    return 1
}
main () {
    while [[ ${1:0:1} == - ]]; do
        case $1 in 
        -h)     echo synopsis: $synopsis; exit;;
        --help) awk '/^NAME$/{ok=1}ok' $0; exit;;
        *)      error -x 1 "unknown option $1";;
        esac && shift
    done
    init-libraries || exit 37
    local path= object= method= 
    local -a types=() mpaths=() apaths=()

    local TOB_caller_path=$PWD

    local query="$1" && shift
    local -a q=()
    local -i o m  # index o points to object, m points to method
    parse_query "$query" || error -x $? parse... 

    resolve_query || error -x $?

    types=() mpaths=() apaths=()

    save=(${type[@]})
    [[ -n $anonymous ]] && {
        type=(.)
        resolve_search_paths one-pass
        type=(${save[@]})
    }
    resolve_search_paths
    cull_duplicate_paths
    type=(${save[@]})

    [[ -n $types ]] || {
        (( ${#apaths[@]} > 1 )) &&
            error -x 120 "prototype but no type resolved for $object"
        error -x 121 "no type or prototype resolved for $object"
    }

    export TOB_query=$query
    export TOB_object=$object
    export TOB_method=$method
    export TOB_type=$type
    export TOB_caller_path

    ## create pseudo-arrays for export, with colon as delimiter:
    save_IFS="$IFS"
    IFS=:
    export TOB_search_paths="${apaths[*]}"
    export TOB_method_paths="${mpaths[*]}"
    export TOB_types="${types[*]}"
    IFS="$save_IFS"

    ## export functions
    export -f warn
    export -f error
    export -f get-symvar
    export -f set-symvar
    export -f find-symvars
    export -f resolve-attribute
    export -f find-type-list-attributes
    export -f get-list

    ## look for executable method:
    resolve_method $method && {
        exec $TOB_method_path "$@"
    }

    ## look for symvar $method
    for path in "${apaths[@]}"; do
        [[ -L $path/$method && ! -e $path/$method ]] && {
            value=$(readlink $path/$method)
            [[ ${value:0:1} = = ]] && printf "%s\n" "${value:1}" && return
        }
    done

    ## look for list attribute @$method:
    for path in "${apaths[@]}"; do
        [[ -e $path/@$method ]] && {
            printf "%s\n" "$(<$path/@$method)" && return
        }
    done
    
    ## look for dictionary attribute %$method:
    for path in "${apaths[@]}"; do
        [[ -e $path/%$method ]] && {
            printf "%s\n" "$(<$path/%$method)" && return
        }
    done
    
    ## look for regular file $method:
    for path in "${apaths[@]}"; do
        [[ -e $path/$method ]] && {
            printf "%s\n" "$(<$path/$method)" && return
        }
    done
    
    ## look for non-resolving symlink $method:
    for path in "${apaths[@]}"; do
        [[ -L $path/$method && ! -e $path/$method ]] && {
            readlink $path/$method && return
        }
    done
    
    error -x 123 "no method $method found"
}

main "$@"
exit
NAME
    tob -- parse and resolve object.method, exec method in object directory

SYNOPSIS
    tob [OPTIONS] object.method [METHOD_OPTIONS] [ARGUMENTS]

DESCRIPTION
    Thinobject aims to achieve object oriented programming and data management
    directly on the filesystem, in a language-independent way.  Methods are
    executable programs, written in any language, and found in a type directory
    resolved symbolically.

    A symlink named ^ identifies the 'type' or 'prototype' of the directory
    object it is found in.  A 'type link' must not resolve directly in the
    filesystem, but rather must exist under a path listed in the TOBLIB
    environment variable.  If the ^ symlink points to an existing directory,
    then it is a 'prototype link'.

    Type links, resolving only under TOBLIB, can contain methods (executable
    programs or scripts) and attributes (arbitrary files).  Prototype links,
    resolving in the filesystem, cannot contain methods, but can contain
    arbitrary attributes.

EXIT VALUE
    Exit value should be 0 if no error occurred, but should have a value from
    101 to 123 if there was an error.  The numbers are assigned sequentially in
    the tob script, and for now that's the only documentation for what specific
    values mean.

OPTIONS
    -h
    --help
    show this help screen (manpage)

OBJECT CREATION
    Create a directory and within it a symlink named ^ to contain the object's
    type or prototype.  E.g.,

        mkdir foo; ln -s Directory foo/^    ## foo is of type Directory
        mkdir bar; ln -s ../foo bar/^       ## bar is of prototype foo

PROPERTIES
    The thinobject system uses ordinary files and directories in the filesystem,
    so the content of an object is arbitrary.  It may be convenient/helpful to
    think of the contents of an object as its ``properties'', if only to
    distinguish them from otherwise ordinary files (which they really are).

    Special meaning is applied to certain files, as follows:

    ^
    symlink to the parent type

    ^foo
    symlink to a mixin type

SEARCH PATHS
    tob prepares a search path for methods and one for attributes.  These differ
    mainly in that methods are not resolved in the object, while attributes may
    be.

    Mixin types are searched before the parent type, in lexical order.  Common
    ancestor types are searched last.

EXPORTED VARIABLES
    TOB_query                   -- the full query, OBJECT.METHOD
    TOB_object                  -- the object name as passed to the thinob enabler
    TOB_method                  -- the invoked method
    TOB_type                    -- the nominal type name
    TOB_types                   -- all types
    TOB_search_paths            -- search paths for object attributes
    TOB_method_paths            -- search paths for object methods
    TOB_caller_path             -- PWD for process that called tob

EXPORTED FUNCTIONS

ENVIRONMENT VARIABLES
    A few variables are checked for:
        QUIET -- suppress output from warn() if set

SEE ALSO
    Ideally, each thinobject type will provide a help method, and a
    --help option to each of its methods.

BUGS
    This is an experimental system.

AUTHOR
    Ken.Irving@alaska.edu (c) 2007-2021
