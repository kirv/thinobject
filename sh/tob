#!/bin/bash

# tob -- thinobject 'enabler' program
# Copyright (C) 2009 Ken Irving
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

warn () {
    test -z "$QUIET" &&
        printf "%s\n" "$*" >&2
    }

error () {
    exitvalue=1
    test -n "$1" -a $1 = --exit && shift && exitvalue=$1 && shift
    warn "$*"
    exit $exitvalue
    }

resolve_object () {  # set classlink to '^', '.^', or ''; or return 1
    test -d $1 ||
        return 1 # not a directory
    unset classlink 
    if test -L $1/.^; then
        classlink='.^'
    elif test -L $1/^; then
        classlink='^'
    fi

    test -n "$classlink" || return 0

    for tlib in $TOBLIB; do
        test -d $tlib/$classlink/ && return 0
    done

    error --exit 103 class $1/$classlink/ does not exist under $TOBLIB
    }

resolve_and_chdir_into_object () {
    # returns 0 and with last_classlink set if object, not set if directory
    # returns 1 on any error
    # returns 2 if target is a file
    local ob_spec="$1"
  # warn "TRY TO RESOLVE $ob_spec"
    TOB_path_to_object=. # assume relative path
    test ${ob_spec:0:1} = / &&
        TOB_path_to_object="" # no, it's an absolute path
    unset last_classlink # global variable, set from resolve_object() classlink
  # warn ob_spec: $ob_spec
    for direntry in ${ob_spec//\//\/ }; do # split on, and leave, slashes
      # warn direntry: $direntry
        unset prefix
        test ${ob_spec:0:1} = . && { # special case: dir or ob begins with dot
            prefix=.
            test $ob_spec = . && # special case: current directory
                direntry=/
            }
        for obentry in ${direntry//./ }; do # split on dots
          # warn obentry: $obentry
            obentry=$prefix$obentry
          # warn obentry: $obentry
            if test ${obentry: -1:1} = /; then  # foo/ explicitly
              # warn foo/ explicitly
                TOB_path_to_object=$TOB_path_to_object/${obentry%/}
                cd $obentry ||
                    error --exit 105 failed to cd to $TOB_path_to_object
                resolve_object $obentry
                last_classlink=$classlink
            elif resolve_object $obentry; then # foo/^
              # warn foo/^
                TOB_path_to_object=$TOB_path_to_object/$obentry
              # warn MORE $TOB_path_to_object $classlink
                cd $obentry ||
                    error --exit 106 failed to cd to $TOB_path_to_object
                last_classlink=$classlink
            elif test -z "$NO_HIDDEN" && resolve_object .$obentry; then # .foo/^
              # warn .foo/^
                TOB_path_to_object=$TOB_path_to_object/.$obentry
                cd .$obentry ||
                    error --exit 107 failed to cd to $TOB_path_to_object
                last_classlink=$classlink
            elif test -z "$NO_HIDDEN" && test -L $obentry; then # foo->bar->.bar/^
              # warn 'foo -> bar -> .bar/^'
                local save_path=$TOB_path_to_object
                resolve_and_chdir_into_object $(/bin/readlink -f $obentry)
                test ${TOB_path_to_object:0:1} = / ||
                    TOB_path_to_object=$save_path/$TOB_path_to_object
            elif test -z "$NO_HIDDEN" && test -L .$obentry; then # .foo->bar->.bar/^
              # warn '.foo -> bar -> .bar/^'
                local save_path=$TOB_path_to_object
                resolve_and_chdir_into_object $(/bin/readlink -f .$obentry)
                test ${TOB_path_to_object:0:1} = / ||
                    TOB_path_to_object=$save_path/$TOB_path_to_object
            elif test -d $obentry; then  # foo/
              # warn foo/
                TOB_path_to_object=$TOB_path_to_object/$obentry
                unset last_classlink
                cd $obentry ||
                    error --exit 108 failed to cd to $TOB_path_to_object
            elif test -z "$NO_HIDDEN" -a -d .$obentry; then # .foo/
              # warn .foo/
                TOB_path_to_object=$TOB_path_to_object/.$obentry
                unset last_classlink
                cd .$obentry ||
                    error --exit 109 failed to cd to $TOB_path_to_object
            elif test -f $obentry; then # foo
              # warn foo
                unset last_classlink
                TOB_file_object=$obentry
                return 2
            elif test -z "$NO_HIDDEN" -a -f .$obentry; then # .foo
              # warn .foo
                unset last_classlink
                TOB_file_object=.$obentry
                return 2
            else
                # combine this obentry with next one, separated by a dot
              # warn prefix=${obentry}.\n"
                prefix=${obentry}.
              # warn PREFIX = $prefix
                unset last_classlink
                continue
            fi
            unset prefix
        done
    done
    test -z "$prefix" || {
      # warn ENDING PREFIX = $prefix
        return 1
        }
    # rare special case: check for object named 'super' or '.super'
    test $super -gt 0 && {
        while test $super -gt 0 -a -d super -o -d .super && {
            obname=.super
            test -d super && obname=super
            resolve_object $obname || break
            TOB_path_to_object=$TOB_path_to_object/$obname
            super-=1
            }
        }
    }

follow_paths () {
    local path=$1 && shift
    while test -d $path/; do
        paths[${#paths[@]}]=$path
        for mixin in $path/{,.}^?*; do
            test -L $mixin -a -z "$TOB_NO_MIXINS" &&
                follow_paths $mixin
        done
        if test -n "$1"; then
            path=$1
            shift
        elif test -L $path/^; then
            path=$path/^
        elif test -L $path/.^; then
            path=$path/.^
        else
            break
        fi
    done
    }

check_paths () {
    local all_paths
    method_paths=()
    class_names=()
    p=${#paths[@]} # start at end to check entries in reverse order
    while test $p -gt 0; do 
        p=$(($p-1))
        local path=${paths[$p]}
        fullpath=$(/bin/readlink -fe $path) ||
            error --exit 110 class path $path does not resolve
        test "${all_paths/$fullpath/}" = "$all_paths" || {
            # this path already visited
            unset paths[$p]
            continue
            }
        all_paths+=" $fullpath"
        full_paths[$p]=$fullpath
        for libroot in ${library[@]}; do
            test ${fullpath#$libroot/} = $fullpath || {
                # path is under one of the library roots, so is a 'class'
                method_paths[$p]=${paths[$p]}
                class_names[$p]=${fullpath#$libroot/}
                }
        done
    done
    }

## the next function is for internal use, the following one is for export:
resolve_method_path () {
    local method=$1
    # uses global super, i.e., count of how many times to skip matched method
    for path in ${method_paths[@]}; do
        test -x $path/$method && {
            test $super = 0 && {
                TOB_method_path=$path/$method
                return
                }
            super=$(($super - 1))
            }
    done
    return 1
    }

TOB_resolve_method_path () {
    local method=$1
    local super=0
    while test "${method:0:6}" = "super."; do
        method=${method:6}
        super=$(($super+1))
    done
    for path in ${TOB_method_paths//:/ }; do
        test -x $path/$method && {
            test $super = 0 && {
                TOB_method_path=$path/$method
                return
                }
            super=$(($super - 1))
            }
    done
    return 1
    }

TOB_get_attr () {
    # set variable 'attr' to attribute value(s), or return false
    # if $arg matches a file, scalar attr is set to its contents
    # if file(s) matches $arg=value, array attr is set to value(s)
    local arg=$1 path file
    test -n "$arg" || return 1
    for path in ${TOB_search_paths//:/ }; do
        test -e "$path/$arg" && attr=$(<$path/$arg) && return
        file=($path/$arg=*)
        test "${file: -1}" = '*' && continue
        attr=(${file[@]#$path/$arg=}) && return
    done
    return 1
    }

find_default_directory_class () {
    test -n "$TOB_DIRECTORY_CLASS" &&
        return
    for lib in ${library[@]}; do
        test -d $lib/Directory && {
            TOB_DIRECTORY_CLASS=$lib/Directory
            break
            }
    done
    }

find_default_file_class () {
    test -n "$TOB_FILE_CLASS" &&
        return
    for lib in ${library[@]}; do
        test -d $lib/File && {
            TOB_FILE_CLASS=$lib/File
            break
            }
    done
    }

main () {

    ## process argument list options:
    arg=$1 && shift
    unset method
    while [ -n "$arg" -a "${arg:0:1}" == "-" ]; do # handle option ...
    
        if [ "$arg" == "-d" -o "$arg" == "--debug" ]; then
            DEBUG=1
            opt="$opt -d"
    
        elif [ "$arg" == "-v" -o "$arg" == "--verbose" ]; then
            VERBOSE=1
            opt="$opt -v"
    
        elif [ "$arg" == "-m" -o "$arg" == "--method" ]; then
            method=$1 && shift
            test $method || error --exit 111 "no method argument"
    
        elif [ "$arg" == "-a" -o "$arg" == "--arg" ]; then
            args="$args $1" && shift
    
        elif [ "$arg" == "-H" -o "$arg" == "--no-hidden" ]; then
            NO_HIDDEN=1
            opt="$opt -H"
    
        elif [ "$arg" == "-S" -o "$arg" == "--not-strict" ]; then
            NOT_STRICT=1
            opt="$opt -S"
    
        elif [ "$arg" == "-q" -o "$arg" == "--quiet" ]; then
            QUIET=1
            opt="$opt --quiet"
    
        elif [ "$arg" == "-h" -o "$arg" == "--help" ]; then # show manpage:
            exec /usr/bin/awk '/^NAME$/,0' $0
        
        else
            error --exit 112 "unsupported option $arg"
        fi
        arg=$1 && shift # try again...
    done
    
    test -z "$arg" && error --exit 113 "no object specified"
    
    test $method && { ## dispatch method from -m or --method option on objects:
        while [ $arg ]; do
            if [ ${arg/=} != $arg ]; then # tag=value form detected
                args="$args $arg"
            else
                test $VERBOSE &&
                    echo $0 $opt $arg.$method $args
                $0 $opt $ob.$method $args ||
                    error --exit 114 "failed in $arg.$method"
            fi
            arg=$1 && shift
        done
        exit
        }
    
    test ${arg/.//} = $arg && # no dot found, so exec as ..method in 'self' object
        exec $0 ..$arg "$@"
    
    ## parse the method and object from the object.method specification:
    TOB_method=${arg##*.}
    TOB_object=${arg%.*}
    
    ## count and remove 'super' modifier(s) if at end of object:
    super=0
    while test "${TOB_object%.super}" != $TOB_object; do
        TOB_object=${TOB_object%.super}
        super+=1
    done
    
    test -n "$TOB_object" ||
        error --exit 116 "no object parsed from $arg with method $TOB_method"
    
    test -n "$TOB_method" ||
        error --exit 117 "no method parsed from $arg, object $TOB_object"
    
    
    ## the next method will change directories, so store caller's location:
    TOB_caller_path=$PWD
    
    resolve_and_chdir_into_object $TOB_object
    return_code=$?
    
    if test $return_code = 1; then
        error --exit 118 failed to resolve object: $TOB_object
    
    
    elif test $return_code = 2; then
        find_default_file_class
        TOB_class_path=$TOB_FILE_CLASS
        warn pwd is $PWD
        warn query object was $TOB_object
        warn file object is $TOB_file_object
        error --exit 119 $TOB_object resolved to a file ... how to handle it?
    
    elif test -n "$last_classlink"; then
      # warn object $TOB_object is a thinobject
      # warn last_classlink is $last_classlink
        TOB_class_path=./$classlink
    else
      # warn object $TOB_object is a directory
        find_default_directory_class
        TOB_class_path=$TOB_DIRECTORY_CLASS
    fi
    
    test -n "$DEBUG" && {
        warn DEBUG: TOB_object=$TOB_object
        warn DEBUG: TOB_method=$TOB_method
        warn DEBUG: TOB_path_to_object=$TOB_path_to_object
        warn DEBUG: TOB_caller_path=$TOB_caller_path
        }
    
    test -n $TOB_class_path || 
        error --exit 120 no object path resolved from $TOB_object
    
    test -n "$DEBUG" && {
        warn DEBUG: TOB_path_to_object=$TOB_path_to_object
        warn DEBUG: TOB_class_path=$TOB_class_path
        }
    
    test -n "$DEBUG" &&
        warn DEBUG: args1=\'$args\' args2=\'$*\'
        
    # follow_paths() recursively builds the paths array starting with argument path
    paths=()
    follow_paths . $TOB_class_path
    # paths array now constains the full inheritance path-set, may have duplicates
    
    check_paths
    # arrays: paths, method_paths, class_names are defined (may be sparse)
    
    ## export thinobject variables
    export TOB_object
    export TOB_method
    export TOB_class_path
    export TOB_caller_path
    export TOB_caller_path_to_object=$TOB_path_to_object
    
    ## export thinobject utility functions
    export -f TOB_resolve_method_path
    export -f TOB_get_attr
    
    
    # create pseudo-arrays for export:
    save_IFS="$IFS"
    IFS=:
    export TOB_search_paths="${paths[*]}"
    export TOB_method_paths="${method_paths[*]}"
    export TOB_type="${class_names[*]}"
    IFS="$save_IFS"
    
    test -n "$DEBUG" && {
        warn DEBUG: TOB_search_paths=$TOB_search_paths
        warn DEBUG: TOB_method_paths=$TOB_method_paths
        warn DEBUG: TOB_type=$TOB_type
        }
    
    resolve_method_path $TOB_method &&
        exec $TOB_method_path $args "$@"
    
    ## no executable method was resolved, so try some built-ins:
    
    test $TOB_method = path && {
        test -z "$*" && echo $TOB_path_to_object/
        for arg in $*; do
            test -e $arg ||
                error --exit 121 $arg not found
            echo $TOB_path_to_object/$arg
        done
        exit
        }
    
    test "$TOB_method" = "type" &&
        echo $TOB_type &&
            exit
    
    ## no method was found, so check for _default method...
    
    for path in ${method_paths[@]}; do
        ## ASSERT: class exists
        test -e $path/_default && {
            test -x $path/_default && {
              # warn DEBUG thinob: exec $path/_default $TOB_object $TOB_method $*
                exec $path/_default $TOB_method "$@"
                }
            ## ASSERT: _default is not executable
            ## maybe it can contain a recipe to be executed?
            error --exit 122 'non-executable _default "method" found'
            }
    done
    
    error --exit 123 "no method $TOB_method found"
    } # end main()

main "$@"

exit 47 # should not happen

## manpage follows
NAME
    tob -- parse and resolve object.method, invoke method in object directory

SYNOPSIS
    tob [OPTIONS] object.method [METHOD_OPTIONS] [ARGUMENTS]
    tob -m method object...

DESCRIPTION
    Thinobject strives to achieve object oriented programming and data
    management directly on the filesystem, in a language-independent way.
    Methods are executable programs, written in any language.  Thinobject
    uses a symlink, .^ or ^, to a class directory (or handler).  Methods
    and attributes are searched for along the chain of class links.

EXIT VALUE
    Exit value should be 0 if no error occurred, but should have a value
    from 101 to 123 if there was an error.  The numbers are assigned
    sequentially in the tob script, and for now that's the only documentation
    for what specific values mean.

OPTIONS
    -d
    --debug
    turn on debug output

    -v
    --verbose
    turn on verbose output

    -m M
    --method M
    apply method M to the following list of objects    

    -a ARGS...
    --arg ARGS...
    provide arguments; useful in conjunction with the --method option

    -h
    --help
    show this help screen (manpage)

    -q
    --quiet
    suppress output to stderr on errors
    
OBJECT CREATION
    Use thinob-new or tob-new to create objects.

BUILT-IN METHODS
    path
    output the object directory path

    type
    output the class hierarchy

    foo [ARG]...
    if no method ``foo'' is found in the class hierarchy, search
    for a LIST property (@foo) or a DICTIONARY property (%foo) and
    treat this pseudo method as an ``accessor'' of that property.

PROPERTIES
    The thinobject system uses ordinary files and directories in the
    filesystem, so the contents of an object is arbitrary.  It may be
    convenient/helpful to think of the contents of an object as its
    ``properties'', if only to distinguish them from otherwise ordinary
    files (which they really are).

    Special meaning is applied to certain files, as follows:

    ^
    .^
    symlink to the parent class

    ^foo
    .^foo
    symlink to a mixin class

    Note: The following properties are handled by default methods,
    no longer as built-ins.

    @
    @foo
    .@
    .@foo
    list property, a file containing a list of entries, one per line.
    @, the anonymous list property, may be scanned when any object method
    is invoked.

    %
    %foo
    .%
    .%foo
    dictionary property, file containing a list of tag=value entries,
    one pair per line.  %, the anonymous dictionary property, may be 
    scanned in automatically during method invocation, so can be used
    to store various object attributes.

    %@
    %@foo
    .%@
    .%@foo
    dictionary property implemented as a list, with keys listed all
    the first line, values on subsequent lines.  Blank lines and 
    comments lines are skipped.

    foo=bar
    attribute 'foo' is assigned the value 'bar'.

SEARCH PATHS
    tob prepares a search path for methods and one for attributes.
    These differ mainly in that methods are not resolved in the object,
    while attributes may be.

    Mixin classes are searched before the parent class, in lexical 
    order.  Common ancestor classes are searched last. 

EXPORTED VARIABLES
    TOB_object -- the object name as passed to the thinob enabler

    TOB_method -- the invoked method

    TOB_type -- the nominal class name

    TOB_class_path -- the class directory or handler path

    TOB_object_path -- the fully resolved object name

    TOB_search_paths -- search paths for object attributes

    TOB_method_paths -- search paths for object methods

    TOB_caller_path

    TOB_caller_path_to_object

    TOB_path_to_object

EXPORTED FUNCTIONS
    TOB_resolve_method_path
    TOB_get_attr

   output format is: $TOB_object.$TOB_method: ARGUMENTS...

SEE ALSO
    tob-new --help
    tob-del --help
    Ideally, each thinobject class will provide a help method, and a
    --help option to each of its methods.

BUGS
    This is an experimental system.

    Not sure the --quiet option is working quite right...

    Should document all exit values.

AUTHOR
    Ken Irving <fnkci@uaf.edu> (c) 2007-2009
