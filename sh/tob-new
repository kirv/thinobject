#!/bin/bash

# tob-new -- create a new thinobject
# Copyright (C) 2009 Ken Irving
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

test -n "$TOBLIB" || TOBLIB=( {$HOME,/usr/local,/opt,/usr,}/lib/tob )

## provide a mechanism to back out of any changes if necessary:
declare -a rollback_commands

function push_rollback_command () {
    test -n "$VERBOSE" &&
        echo adding rollback command: $@
    rollback_commands=( "$*" "${rollback_commands[@]}" )
    }

function rollback () {
    test -n "$VERBOSE" &&
        echo rolling back commands:
    for cmd in "${rollback_commands[@]}"; do
        test -n "$VERBOSE" &&
            printf "\t%s\n" "$cmd"
        $cmd || {
            echo failed to execute rollback command: $cmd
            exit 2
            }
    done
    }

function error () {
    echo $* >&2
    test -n "$rollback_commands" && rollback
    exit 1
    }

# parse options:
while test "${1:0:1}" = -; do
    opt=$1 && shift
    case $opt in
        -s | --hide)        TOB_NEW_DOTDIR=1;;
        -a | --hide-attr)   TOB_DOT_ATTR=1;;
        -v | --verbose)     VERBOSE=1;;
        -d | --debug)       DEBUG=1;;
        -S | --no-hide)     unset TOB_NEW_DOTDIR;;
        -A | --no-hide-attr)unset TOB_DOT_ATTR;;
        -V | --no-verbose)  unset VERBOSE;;
        -D | --no-debug)    unset DEBUG;;
        -h | --help)        exec awk '/^NAME$/,0' $0 ;;
        -m | --init-method) 
            test -n "$1" ||
                error "missing argument for -m or --init-method option"
            test -n "$1" = ${1#*/} ||
                error init method cannot include a slash: $1
            TOB_NEW_INIT_METHOD=$1 && shift
            ;;
        *) error --exit 102 "unsupported option $opt" ;;

    esac
done

target=$1 && shift
test -n "$target" || error "${0##*/} [OPTIONS] TARGET TYPE"

test -e $target && test -z "$TOB_FORCE" &&
    error target $target already exists

tob $target.type 


##  the target must not already be a thinobject:
tob $target.path > /dev/null 2>&1 &&
    error $target already exists as a thinobject

## arg #2 specifies the type of the new object, or defaults to Object
type=$1 && shift
test -n "$type" || type=Object

## check that type can be resolved:

unset ok
for toblib in ${TOBLIB[@]}; do
    test -d $toblib/$type || continue
    ok=1
done

test "$ok" ||
    error unable to resolve type $type to a thinobject class

## ASSERT: type resolves to a thinobject class

## now try to handle target as a set of cases:

unset DO_THIS

if test ! -e $target; then
    test -n "$VERBOSE" && echo "creating $target as type $type

    ## create the object as an ordinary or hidden directory:
    if test -z "$TOB_NEW_DOTDIR"; then
        DO_THIS=CREATE_DIR
    elif test "$TOB_NEW_DOTDIR" = "1"; then
        DO_THIS=CREATE_DOT_DIR
    else
        error unexpected value of variable TOB_NEW_DOTDIR: $TOB_NEW_DOTDIR
    fi

elif test -L $target; then
    error thinobject will not be created because target $target is a symlink

elif test -f $target; then
    test -n "$VERBOSE" &&
        echo target is an ordinary file
    DO_THIS=CREATE_DOT_DIR

elif test -d $target; then
    test -n "$VERBOSE" &&
        echo target is a directory
    if test -n "$TOB_NEW_DOTDIR"; then
        DO_THIS=USE_DIR
    elif test "$TOB_NEW_DOTDIR" = "1"; then
        DO_THIS=CREATE_DOT_DIR
    else
        error unexpected value of variable TOB_NEW_DOTDIR: $TOB_NEW_DOTDIR
    fi

fi

## next, do what variable DO_THIS says to do:
if test -z "$DO_THIS"; then
    error internal error: variable DO_THIS is not set

elif test $DO_THIS = USE_DIR; then
    tob=$target

elif test $DO_THIS = CREATE_DIR; then
    tob=$target
    test -d $tob &&
        error thinobject directory $tob already exists
    test $VERBOSE &&
        echo creating new thinobject $tob
    mkdir $tob ||
        error failed to create thinobject directory: $tob
    push_rollback_command rmdir $tob

elif test $DO_THIS = CREATE_DOT_DIR; then
    ## create potential tob by "dotting" target:
    if test ${target/\/} = $target; then # no slash in target
        tob=.$target
    else # target has a slash in it
        ## insert dot after last slash:
        tob=${target%\/*}/.${target/*\//}
    fi
    test -d $tob &&
        error thinobject directory $tob already exists for $target
    test $VERBOSE &&
        echo creating new thinobject $tob for $target
    mkdir $tob ||
        error failed to create thinobject directory $tob for $target
    push_rollback_command rmdir $tob

else
    error internal error: unknown value for DO_THIS variable: $DO_THIS

fi

## ASSERT: directory $tob exists, but class link is not yet defined

test -d $tob && test ! -e $tob/^ && test ! -e $tob/.^ ||
    error error: file $tob/^ or $tob/.^ already exists in place of class link

## next, create the class link

test $VERBOSE &&
    echo setting link to class $class in thinobject $tob for $target

classlink_name=^
test -n "$TOB_DOT_ATTR" && classlink_name=.^

ln -s $classpath $tob/$classlink_name ||
    error failed to create symlink: ln -s $classpath $tob/$classlink_name
    
push_rollback_command rm $tob/$classlink_name

## check for uri property (@uri or .@uri) in class:
unset uri_source
test -e $classpath/.@uri && uri_source=$classpath/.@uri
test -e $classpath/@uri && uri_source=$classpath/@uri

## copy class uri property to thinobject:
test -e "$uri_source" && {
    uri_dest=${uri_source##*/}
    test -n "$TOB_DOT_ATTR" && uri_dest=.@uri
    test -n "$VERBOSE" &&
        echo "cp FROM:$uri_source TO:$tob/$uri_dest"
    cp $uri_source $tob/$uri_dest ||
        error failed to copy class uri property $uri_source to $tob/$uri_dest
    push_rollback_command rm $tob/$uri_dest
    }

## lastly, execute the init method if specified or by default if it exists:

# make the target object's name known to the init method:
export TOB_NEW_target=$target

if test -n "$TOB_NEW_INIT_METHOD"; then
    # init method was specified:
    tob $tob.$TOB_NEW_INIT_METHOD "$@" ||
        error method $TOB_NEW_INIT_METHOD failed with exit value $?
elif tob $tob.method init > /dev/null; then
    # run init method by default if it exists
    tob $tob.init "$@" ||
        error method init failed with exit value $?
else
    test -n "$1" &&
        error extra arguments were provided: "$@"
fi

exit 0

NAME
    thinob-new -- create a new thinobject

SYNOPSIS
    thinob-new [OPTIONS] TARGET [CLASS] 

DESCRIPTION
    Exit with status 1 if TARGET is already a thinobject (or even if it
    looks like one).

    Create or make TARGET a thinobject of a given class, or of class Object
    if not specified.

    Several possibilities may exist to create a new thinobject, based on
    existence and type of the target and upon several options.

    If TARGET does not exist, mkdir TARGET/ and set a symlink to the class
    named TARGET/.^.

    If TARGET is a directory, create symlink TARGET/.^ pointing to the class.

    If TARGET is a file, mkdir .TARGET/ and .TARGET/.^ as above.

    Some options may modify these behaviors; see below.

RETURN VALUE
    0   ok, target thinobject was created
    1   some error occurred

OPTIONS
    The following options may be used to control behavior, or the indicated
    environment variables may be used directly, e.g., to implement default 
    behaviors.

    -s
    --hide
    create the object as a "dot directory", i.e., hidden, perhaps shadowing 
    a regular file or directory.  Sets variable TOB_NEW_DOTDIR.

    -S
    --no-hide
    create the object as a normal directory, not hidden and not shadowing
    anything.  Unsets variable TOB_NEW_DOTDIR.

    -a
    --hide-attr
    create symbolic link to thinobject class as .^, not ^.  Sets/uses 
    variable TOB_HIDE_ATTR.

    -A
    --no-hide-attr
    create symbolic link to thinobject class as ^.  Unsets variable
    TOB_HIDE_ATTR.

    -m METHOD
    --init-method METHOD
    invoke the given method after the thinobject is created, passing any
    remaining arguments to the method.  Sets variable TOB_NEW_INIT_METHOD.
    The operation fails (and no thinobject is created) if the specified
    method is not found.  By default, if the variable is not set, the
    init method is invoked if present.  Specify the option or set the
    variable to a blank/empty value to avoid running any method.

    -d
    --debug
    turn on debug output (sets variable DEBUG)

    -D
    --no-debug
    turn on debug output (unsets variable DEBUG)

    -v
    --verbose
    turn on verbose output (sets variable VERBOSE)

    -V
    --no-verbose
    turn off verbose output (unsets variable VERBOSE)

    -h
    --help
    show this help screen (manpage)

AUTHOR
    Ken Irving <fnkci@uaf.edu> (c) 2009

